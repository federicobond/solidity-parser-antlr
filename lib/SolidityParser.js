// Generated from solidity-antlr4/Solidity.g4 by ANTLR 4.6
// jshint ignore: start
var antlr4 = require('../antlr4/index');
var SolidityListener = require('./SolidityListener').SolidityListener;
var grammarFileName = "Solidity.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003z\u039a\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0003\u0002\u0003\u0002\u0003\u0002\u0007\u0002",
    "\u00a6\n\u0002\f\u0002\u000e\u0002\u00a9\u000b\u0002\u0003\u0002\u0003",
    "\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0004\u0003\u0004\u0003\u0005\u0003\u0005\u0005\u0005\u00b6\n\u0005",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u00ba\n\u0006\u0003\u0007\u0003",
    "\u0007\u0003\b\u0005\b\u00bf\n\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003",
    "\t\u0005\t\u00c6\n\t\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00cc\n",
    "\n\u0003\n\u0003\n\u0003\n\u0003\n\u0005\n\u00d2\n\n\u0003\n\u0003\n",
    "\u0005\n\u00d6\n\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0007\n\u00e0\n\n\f\n\u000e\n\u00e3\u000b\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0003\n\u0005\n\u00ea\n\n\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0007\u000b\u00f2\n",
    "\u000b\f\u000b\u000e\u000b\u00f5\u000b\u000b\u0005\u000b\u00f7\n\u000b",
    "\u0003\u000b\u0003\u000b\u0007\u000b\u00fb\n\u000b\f\u000b\u000e\u000b",
    "\u00fe\u000b\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0007\f\u0107\n\f\f\f\u000e\f\u010a\u000b\f\u0003\f\u0003",
    "\f\u0005\f\u010e\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0005\r\u0117\n\r\u0003\u000e\u0003\u000e\u0007\u000e\u011b",
    "\n\u000e\f\u000e\u000e\u000e\u011e\u000b\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0005\u000e\u0123\n\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u012c",
    "\n\u000f\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010",
    "\u0138\n\u0010\f\u0010\u000e\u0010\u013b\u000b\u0010\u0005\u0010\u013d",
    "\n\u0010\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003\u0011",
    "\u0005\u0011\u0144\n\u0011\u0003\u0011\u0003\u0011\u0003\u0012\u0003",
    "\u0012\u0003\u0012\u0005\u0012\u014b\n\u0012\u0003\u0012\u0005\u0012",
    "\u014e\n\u0012\u0003\u0013\u0003\u0013\u0005\u0013\u0152\n\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0157\n\u0013\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u015b\n\u0013\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0007\u0015\u0166\n\u0015\f\u0015\u000e\u0015\u0169\u000b\u0015",
    "\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u016f\n",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0018\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u0179\n\u0018\u0003\u0018",
    "\u0003\u0018\u0007\u0018\u017d\n\u0018\f\u0018\u000e\u0018\u0180\u000b",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u0019\u0007\u0019\u0188\n\u0019\f\u0019\u000e\u0019\u018b\u000b\u0019",
    "\u0005\u0019\u018d\n\u0019\u0003\u0019\u0003\u0019\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0007\u001a\u0194\n\u001a\f\u001a\u000e\u001a\u0197",
    "\u000b\u001a\u0003\u001a\u0005\u001a\u019a\n\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0007\u001b\u01a0\n\u001b\f\u001b\u000e",
    "\u001b\u01a3\u000b\u001b\u0005\u001b\u01a5\n\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001c\u0003\u001c\u0005\u001c\u01ab\n\u001c\u0003\u001c",
    "\u0005\u001c\u01ae\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0007\u001d\u01b4\n\u001d\f\u001d\u000e\u001d\u01b7\u000b\u001d",
    "\u0005\u001d\u01b9\n\u001d\u0003\u001d\u0003\u001d\u0003\u001e\u0003",
    "\u001e\u0005\u001e\u01bf\n\u001e\u0003\u001f\u0003\u001f\u0005\u001f",
    "\u01c3\n\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003 \u0003",
    " \u0005 \u01cc\n \u0003 \u0003 \u0003 \u0005 \u01d1\n \u0003 \u0007",
    " \u01d4\n \f \u000e \u01d7\u000b \u0003!\u0003!\u0003!\u0007!\u01dc",
    "\n!\f!\u000e!\u01df\u000b!\u0003\"\u0003\"\u0003\"\u0003\"\u0003\"\u0003",
    "\"\u0003\"\u0003#\u0003#\u0003#\u0003#\u0003#\u0007#\u01ed\n#\f#\u000e",
    "#\u01f0\u000b#\u0003#\u0003#\u0005#\u01f4\n#\u0003$\u0003$\u0003%\u0003",
    "%\u0003&\u0003&\u0007&\u01fc\n&\f&\u000e&\u01ff\u000b&\u0003&\u0003",
    "&\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003\'\u0003",
    "\'\u0003\'\u0003\'\u0005\'\u020e\n\'\u0003(\u0003(\u0003(\u0003)\u0003",
    ")\u0003)\u0003)\u0003)\u0003)\u0003)\u0005)\u021a\n)\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003+\u0003+\u0005+\u0224\n+\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u022a\n,\u0003,\u0005,\u022d\n,\u0003,\u0003,\u0005",
    ",\u0231\n,\u0003,\u0003,\u0003,\u0003-\u0003-\u0005-\u0238\n-\u0003",
    "-\u0003-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0003",
    "/\u0003/\u0003/\u00030\u00030\u00030\u00031\u00031\u00051\u024c\n1\u0003",
    "1\u00031\u00032\u00032\u00032\u00033\u00033\u00033\u00053\u0256\n3\u0003",
    "3\u00033\u00053\u025a\n3\u00033\u00033\u00034\u00034\u00054\u0260\n",
    "4\u00034\u00074\u0263\n4\f4\u000e4\u0266\u000b4\u00034\u00054\u0269",
    "\n4\u00034\u00034\u00035\u00035\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00056\u0281\n6\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u00036\u0003",
    "6\u00036\u00076\u02bc\n6\f6\u000e6\u02bf\u000b6\u00037\u00037\u0003",
    "7\u00037\u00037\u00037\u00037\u00057\u02c8\n7\u00038\u00038\u00038\u0007",
    "8\u02cd\n8\f8\u000e8\u02d0\u000b8\u00039\u00039\u00039\u00079\u02d5",
    "\n9\f9\u000e9\u02d8\u000b9\u00039\u00059\u02db\n9\u0003:\u0003:\u0003",
    ":\u0003:\u0003;\u0003;\u0005;\u02e3\n;\u0003;\u0003;\u0005;\u02e7\n",
    ";\u0005;\u02e9\n;\u0003<\u0003<\u0007<\u02ed\n<\f<\u000e<\u02f0\u000b",
    "<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0005=\u0308\n=\u0003>\u0003>\u0005>\u030c\n>\u0003",
    "?\u0003?\u0003?\u0005?\u0311\n?\u0003?\u0003?\u0007?\u0315\n?\f?\u000e",
    "?\u0318\u000b?\u0003?\u0005?\u031b\n?\u0003@\u0003@\u0003@\u0003@\u0003",
    "@\u0003A\u0003A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003B\u0005",
    "B\u032b\nB\u0003C\u0003C\u0003C\u0007C\u0330\nC\fC\u000eC\u0333\u000b",
    "C\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003F\u0003F\u0003F\u0007",
    "F\u033e\nF\fF\u000eF\u0341\u000bF\u0003F\u0003F\u0003F\u0005F\u0346",
    "\nF\u0003G\u0003G\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0005",
    "H\u0351\nH\u0003H\u0003H\u0003H\u0005H\u0356\nH\u0003H\u0003H\u0003",
    "I\u0003I\u0003I\u0005I\u035d\nI\u0003I\u0003I\u0003I\u0005I\u0362\n",
    "I\u0003I\u0003I\u0003J\u0003J\u0003K\u0003K\u0003K\u0003K\u0003L\u0003",
    "L\u0003L\u0003L\u0003L\u0003M\u0003M\u0003M\u0003M\u0003M\u0003N\u0003",
    "N\u0005N\u0378\nN\u0003N\u0003N\u0005N\u037c\nN\u0007N\u037e\nN\fN\u000e",
    "N\u0381\u000bN\u0003N\u0003N\u0003N\u0003N\u0003N\u0007N\u0388\nN\f",
    "N\u000eN\u038b\u000bN\u0005N\u038d\nN\u0003N\u0005N\u0390\nN\u0003O",
    "\u0003O\u0003P\u0003P\u0005P\u0396\nP\u0003Q\u0003Q\u0003Q\u0002\u0004",
    ">jR\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a",
    "\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080",
    "\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098",
    "\u009a\u009c\u009e\u00a0\u0002\u0014\u0003\u0002\u0005\t\u0003\u0002",
    "\u0011\u0013\u0005\u0002mmpprs\u0003\u0002%&\u0005\u0002mmqqtu\u0004",
    "\u000203`d\u0003\u000245\u0003\u000278\u0003\u00029:\u0004\u0002\f\f",
    ">?\u0003\u0002@A\u0003\u0002\u0006\t\u0003\u0002DE\u0004\u0002\u0017",
    "\u0017JS\u0006\u0002..11VVvv\u0005\u0002ghjjww\u0003\u0002gh\u0004\u0002",
    "\r\rvv\u03ee\u0002\u00a7\u0003\u0002\u0002\u0002\u0004\u00ac\u0003\u0002",
    "\u0002\u0002\u0006\u00b1\u0003\u0002\u0002\u0002\b\u00b5\u0003\u0002",
    "\u0002\u0002\n\u00b7\u0003\u0002\u0002\u0002\f\u00bb\u0003\u0002\u0002",
    "\u0002\u000e\u00be\u0003\u0002\u0002\u0002\u0010\u00c2\u0003\u0002\u0002",
    "\u0002\u0012\u00e9\u0003\u0002\u0002\u0002\u0014\u00eb\u0003\u0002\u0002",
    "\u0002\u0016\u0101\u0003\u0002\u0002\u0002\u0018\u0116\u0003\u0002\u0002",
    "\u0002\u001a\u0118\u0003\u0002\u0002\u0002\u001c\u0126\u0003\u0002\u0002",
    "\u0002\u001e\u012f\u0003\u0002\u0002\u0002 \u0140\u0003\u0002\u0002",
    "\u0002\"\u0147\u0003\u0002\u0002\u0002$\u014f\u0003\u0002\u0002\u0002",
    "&\u015c\u0003\u0002\u0002\u0002(\u0167\u0003\u0002\u0002\u0002*\u016a",
    "\u0003\u0002\u0002\u0002,\u0172\u0003\u0002\u0002\u0002.\u0174\u0003",
    "\u0002\u0002\u00020\u0183\u0003\u0002\u0002\u00022\u0190\u0003\u0002",
    "\u0002\u00024\u019b\u0003\u0002\u0002\u00026\u01a8\u0003\u0002\u0002",
    "\u00028\u01af\u0003\u0002\u0002\u0002:\u01bc\u0003\u0002\u0002\u0002",
    "<\u01c0\u0003\u0002\u0002\u0002>\u01cb\u0003\u0002\u0002\u0002@\u01d8",
    "\u0003\u0002\u0002\u0002B\u01e0\u0003\u0002\u0002\u0002D\u01e7\u0003",
    "\u0002\u0002\u0002F\u01f5\u0003\u0002\u0002\u0002H\u01f7\u0003\u0002",
    "\u0002\u0002J\u01f9\u0003\u0002\u0002\u0002L\u020d\u0003\u0002\u0002",
    "\u0002N\u020f\u0003\u0002\u0002\u0002P\u0212\u0003\u0002\u0002\u0002",
    "R\u021b\u0003\u0002\u0002\u0002T\u0223\u0003\u0002\u0002\u0002V\u0225",
    "\u0003\u0002\u0002\u0002X\u0235\u0003\u0002\u0002\u0002Z\u023b\u0003",
    "\u0002\u0002\u0002\\\u0243\u0003\u0002\u0002\u0002^\u0246\u0003\u0002",
    "\u0002\u0002`\u0249\u0003\u0002\u0002\u0002b\u024f\u0003\u0002\u0002",
    "\u0002d\u0255\u0003\u0002\u0002\u0002f\u025d\u0003\u0002\u0002\u0002",
    "h\u026c\u0003\u0002\u0002\u0002j\u0280\u0003\u0002\u0002\u0002l\u02c7",
    "\u0003\u0002\u0002\u0002n\u02c9\u0003\u0002\u0002\u0002p\u02d1\u0003",
    "\u0002\u0002\u0002r\u02dc\u0003\u0002\u0002\u0002t\u02e8\u0003\u0002",
    "\u0002\u0002v\u02ea\u0003\u0002\u0002\u0002x\u0307\u0003\u0002\u0002",
    "\u0002z\u030b\u0003\u0002\u0002\u0002|\u030d\u0003\u0002\u0002\u0002",
    "~\u031c\u0003\u0002\u0002\u0002\u0080\u0321\u0003\u0002\u0002\u0002",
    "\u0082\u032a\u0003\u0002\u0002\u0002\u0084\u032c\u0003\u0002\u0002\u0002",
    "\u0086\u0334\u0003\u0002\u0002\u0002\u0088\u0337\u0003\u0002\u0002\u0002",
    "\u008a\u033a\u0003\u0002\u0002\u0002\u008c\u0347\u0003\u0002\u0002\u0002",
    "\u008e\u034c\u0003\u0002\u0002\u0002\u0090\u0359\u0003\u0002\u0002\u0002",
    "\u0092\u0365\u0003\u0002\u0002\u0002\u0094\u0367\u0003\u0002\u0002\u0002",
    "\u0096\u036b\u0003\u0002\u0002\u0002\u0098\u0370\u0003\u0002\u0002\u0002",
    "\u009a\u038f\u0003\u0002\u0002\u0002\u009c\u0391\u0003\u0002\u0002\u0002",
    "\u009e\u0393\u0003\u0002\u0002\u0002\u00a0\u0397\u0003\u0002\u0002\u0002",
    "\u00a2\u00a6\u0005\u0004\u0003\u0002\u00a3\u00a6\u0005\u0012\n\u0002",
    "\u00a4\u00a6\u0005\u0014\u000b\u0002\u00a5\u00a2\u0003\u0002\u0002\u0002",
    "\u00a5\u00a3\u0003\u0002\u0002\u0002\u00a5\u00a4\u0003\u0002\u0002\u0002",
    "\u00a6\u00a9\u0003\u0002\u0002\u0002\u00a7\u00a5\u0003\u0002\u0002\u0002",
    "\u00a7\u00a8\u0003\u0002\u0002\u0002\u00a8\u00aa\u0003\u0002\u0002\u0002",
    "\u00a9\u00a7\u0003\u0002\u0002\u0002\u00aa\u00ab\u0007\u0002\u0002\u0003",
    "\u00ab\u0003\u0003\u0002\u0002\u0002\u00ac\u00ad\u0007\u0003\u0002\u0002",
    "\u00ad\u00ae\u0005\u0006\u0004\u0002\u00ae\u00af\u0005\b\u0005\u0002",
    "\u00af\u00b0\u0007\u0004\u0002\u0002\u00b0\u0005\u0003\u0002\u0002\u0002",
    "\u00b1\u00b2\u0005\u00a0Q\u0002\u00b2\u0007\u0003\u0002\u0002\u0002",
    "\u00b3\u00b6\u0005\n\u0006\u0002\u00b4\u00b6\u0005j6\u0002\u00b5\u00b3",
    "\u0003\u0002\u0002\u0002\u00b5\u00b4\u0003\u0002\u0002\u0002\u00b6\t",
    "\u0003\u0002\u0002\u0002\u00b7\u00b9\u0005\u000e\b\u0002\u00b8\u00ba",
    "\u0005\u000e\b\u0002\u00b9\u00b8\u0003\u0002\u0002\u0002\u00b9\u00ba",
    "\u0003\u0002\u0002\u0002\u00ba\u000b\u0003\u0002\u0002\u0002\u00bb\u00bc",
    "\t\u0002\u0002\u0002\u00bc\r\u0003\u0002\u0002\u0002\u00bd\u00bf\u0005",
    "\f\u0007\u0002\u00be\u00bd\u0003\u0002\u0002\u0002\u00be\u00bf\u0003",
    "\u0002\u0002\u0002\u00bf\u00c0\u0003\u0002\u0002\u0002\u00c0\u00c1\u0007",
    "e\u0002\u0002\u00c1\u000f\u0003\u0002\u0002\u0002\u00c2\u00c5\u0005",
    "\u00a0Q\u0002\u00c3\u00c4\u0007\n\u0002\u0002\u00c4\u00c6\u0005\u00a0",
    "Q\u0002\u00c5\u00c3\u0003\u0002\u0002\u0002\u00c5\u00c6\u0003\u0002",
    "\u0002\u0002\u00c6\u0011\u0003\u0002\u0002\u0002\u00c7\u00c8\u0007\u000b",
    "\u0002\u0002\u00c8\u00cb\u0007w\u0002\u0002\u00c9\u00ca\u0007\n\u0002",
    "\u0002\u00ca\u00cc\u0005\u00a0Q\u0002\u00cb\u00c9\u0003\u0002\u0002",
    "\u0002\u00cb\u00cc\u0003\u0002\u0002\u0002\u00cc\u00cd\u0003\u0002\u0002",
    "\u0002\u00cd\u00ea\u0007\u0004\u0002\u0002\u00ce\u00d1\u0007\u000b\u0002",
    "\u0002\u00cf\u00d2\u0007\f\u0002\u0002\u00d0\u00d2\u0005\u00a0Q\u0002",
    "\u00d1\u00cf\u0003\u0002\u0002\u0002\u00d1\u00d0\u0003\u0002\u0002\u0002",
    "\u00d2\u00d5\u0003\u0002\u0002\u0002\u00d3\u00d4\u0007\n\u0002\u0002",
    "\u00d4\u00d6\u0005\u00a0Q\u0002\u00d5\u00d3\u0003\u0002\u0002\u0002",
    "\u00d5\u00d6\u0003\u0002\u0002\u0002\u00d6\u00d7\u0003\u0002\u0002\u0002",
    "\u00d7\u00d8\u0007\r\u0002\u0002\u00d8\u00d9\u0007w\u0002\u0002\u00d9",
    "\u00ea\u0007\u0004\u0002\u0002\u00da\u00db\u0007\u000b\u0002\u0002\u00db",
    "\u00dc\u0007\u000e\u0002\u0002\u00dc\u00e1\u0005\u0010\t\u0002\u00dd",
    "\u00de\u0007\u000f\u0002\u0002\u00de\u00e0\u0005\u0010\t\u0002\u00df",
    "\u00dd\u0003\u0002\u0002\u0002\u00e0\u00e3\u0003\u0002\u0002\u0002\u00e1",
    "\u00df\u0003\u0002\u0002\u0002\u00e1\u00e2\u0003\u0002\u0002\u0002\u00e2",
    "\u00e4\u0003\u0002\u0002\u0002\u00e3\u00e1\u0003\u0002\u0002\u0002\u00e4",
    "\u00e5\u0007\u0010\u0002\u0002\u00e5\u00e6\u0007\r\u0002\u0002\u00e6",
    "\u00e7\u0007w\u0002\u0002\u00e7\u00e8\u0007\u0004\u0002\u0002\u00e8",
    "\u00ea\u0003\u0002\u0002\u0002\u00e9\u00c7\u0003\u0002\u0002\u0002\u00e9",
    "\u00ce\u0003\u0002\u0002\u0002\u00e9\u00da\u0003\u0002\u0002\u0002\u00ea",
    "\u0013\u0003\u0002\u0002\u0002\u00eb\u00ec\t\u0003\u0002\u0002\u00ec",
    "\u00f6\u0005\u00a0Q\u0002\u00ed\u00ee\u0007\u0014\u0002\u0002\u00ee",
    "\u00f3\u0005\u0016\f\u0002\u00ef\u00f0\u0007\u000f\u0002\u0002\u00f0",
    "\u00f2\u0005\u0016\f\u0002\u00f1\u00ef\u0003\u0002\u0002\u0002\u00f2",
    "\u00f5\u0003\u0002\u0002\u0002\u00f3\u00f1\u0003\u0002\u0002\u0002\u00f3",
    "\u00f4\u0003\u0002\u0002\u0002\u00f4\u00f7\u0003\u0002\u0002\u0002\u00f5",
    "\u00f3\u0003\u0002\u0002\u0002\u00f6\u00ed\u0003\u0002\u0002\u0002\u00f6",
    "\u00f7\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8",
    "\u00fc\u0007\u000e\u0002\u0002\u00f9\u00fb\u0005\u0018\r\u0002\u00fa",
    "\u00f9\u0003\u0002\u0002\u0002\u00fb\u00fe\u0003\u0002\u0002\u0002\u00fc",
    "\u00fa\u0003\u0002\u0002\u0002\u00fc\u00fd\u0003\u0002\u0002\u0002\u00fd",
    "\u00ff\u0003\u0002\u0002\u0002\u00fe\u00fc\u0003\u0002\u0002\u0002\u00ff",
    "\u0100\u0007\u0010\u0002\u0002\u0100\u0015\u0003\u0002\u0002\u0002\u0101",
    "\u010d\u0005@!\u0002\u0102\u0103\u0007\u0015\u0002\u0002\u0103\u0108",
    "\u0005j6\u0002\u0104\u0105\u0007\u000f\u0002\u0002\u0105\u0107\u0005",
    "j6\u0002\u0106\u0104\u0003\u0002\u0002\u0002\u0107\u010a\u0003\u0002",
    "\u0002\u0002\u0108\u0106\u0003\u0002\u0002\u0002\u0108\u0109\u0003\u0002",
    "\u0002\u0002\u0109\u010b\u0003\u0002\u0002\u0002\u010a\u0108\u0003\u0002",
    "\u0002\u0002\u010b\u010c\u0007\u0016\u0002\u0002\u010c\u010e\u0003\u0002",
    "\u0002\u0002\u010d\u0102\u0003\u0002\u0002\u0002\u010d\u010e\u0003\u0002",
    "\u0002\u0002\u010e\u0017\u0003\u0002\u0002\u0002\u010f\u0117\u0005\u001a",
    "\u000e\u0002\u0110\u0117\u0005\u001c\u000f\u0002\u0111\u0117\u0005\u001e",
    "\u0010\u0002\u0112\u0117\u0005 \u0011\u0002\u0113\u0117\u0005$\u0013",
    "\u0002\u0114\u0117\u0005*\u0016\u0002\u0115\u0117\u0005.\u0018\u0002",
    "\u0116\u010f\u0003\u0002\u0002\u0002\u0116\u0110\u0003\u0002\u0002\u0002",
    "\u0116\u0111\u0003\u0002\u0002\u0002\u0116\u0112\u0003\u0002\u0002\u0002",
    "\u0116\u0113\u0003\u0002\u0002\u0002\u0116\u0114\u0003\u0002\u0002\u0002",
    "\u0116\u0115\u0003\u0002\u0002\u0002\u0117\u0019\u0003\u0002\u0002\u0002",
    "\u0118\u011c\u0005> \u0002\u0119\u011b\t\u0004\u0002\u0002\u011a\u0119",
    "\u0003\u0002\u0002\u0002\u011b\u011e\u0003\u0002\u0002\u0002\u011c\u011a",
    "\u0003\u0002\u0002\u0002\u011c\u011d\u0003\u0002\u0002\u0002\u011d\u011f",
    "\u0003\u0002\u0002\u0002\u011e\u011c\u0003\u0002\u0002\u0002\u011f\u0122",
    "\u0005\u00a0Q\u0002\u0120\u0121\u0007\u0017\u0002\u0002\u0121\u0123",
    "\u0005j6\u0002\u0122\u0120\u0003\u0002\u0002\u0002\u0122\u0123\u0003",
    "\u0002\u0002\u0002\u0123\u0124\u0003\u0002\u0002\u0002\u0124\u0125\u0007",
    "\u0004\u0002\u0002\u0125\u001b\u0003\u0002\u0002\u0002\u0126\u0127\u0007",
    "\u0018\u0002\u0002\u0127\u0128\u0005\u00a0Q\u0002\u0128\u012b\u0007",
    "\u0019\u0002\u0002\u0129\u012c\u0007\f\u0002\u0002\u012a\u012c\u0005",
    "> \u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012b\u012a\u0003\u0002",
    "\u0002\u0002\u012c\u012d\u0003\u0002\u0002\u0002\u012d\u012e\u0007\u0004",
    "\u0002\u0002\u012e\u001d\u0003\u0002\u0002\u0002\u012f\u0130\u0007\u001a",
    "\u0002\u0002\u0130\u0131\u0005\u00a0Q\u0002\u0131\u013c\u0007\u000e",
    "\u0002\u0002\u0132\u0133\u0005<\u001f\u0002\u0133\u0139\u0007\u0004",
    "\u0002\u0002\u0134\u0135\u0005<\u001f\u0002\u0135\u0136\u0007\u0004",
    "\u0002\u0002\u0136\u0138\u0003\u0002\u0002\u0002\u0137\u0134\u0003\u0002",
    "\u0002\u0002\u0138\u013b\u0003\u0002\u0002\u0002\u0139\u0137\u0003\u0002",
    "\u0002\u0002\u0139\u013a\u0003\u0002\u0002\u0002\u013a\u013d\u0003\u0002",
    "\u0002\u0002\u013b\u0139\u0003\u0002\u0002\u0002\u013c\u0132\u0003\u0002",
    "\u0002\u0002\u013c\u013d\u0003\u0002\u0002\u0002\u013d\u013e\u0003\u0002",
    "\u0002\u0002\u013e\u013f\u0007\u0010\u0002\u0002\u013f\u001f\u0003\u0002",
    "\u0002\u0002\u0140\u0141\u0007\u001b\u0002\u0002\u0141\u0143\u0005\u00a0",
    "Q\u0002\u0142\u0144\u00054\u001b\u0002\u0143\u0142\u0003\u0002\u0002",
    "\u0002\u0143\u0144\u0003\u0002\u0002\u0002\u0144\u0145\u0003\u0002\u0002",
    "\u0002\u0145\u0146\u0005J&\u0002\u0146!\u0003\u0002\u0002\u0002\u0147",
    "\u014d\u0005\u00a0Q\u0002\u0148\u014a\u0007\u0015\u0002\u0002\u0149",
    "\u014b\u0005n8\u0002\u014a\u0149\u0003\u0002\u0002\u0002\u014a\u014b",
    "\u0003\u0002\u0002\u0002\u014b\u014c\u0003\u0002\u0002\u0002\u014c\u014e",
    "\u0007\u0016\u0002\u0002\u014d\u0148\u0003\u0002\u0002\u0002\u014d\u014e",
    "\u0003\u0002\u0002\u0002\u014e#\u0003\u0002\u0002\u0002\u014f\u0151",
    "\u0007\u001c\u0002\u0002\u0150\u0152\u0005\u00a0Q\u0002\u0151\u0150",
    "\u0003\u0002\u0002\u0002\u0151\u0152\u0003\u0002\u0002\u0002\u0152\u0153",
    "\u0003\u0002\u0002\u0002\u0153\u0154\u00054\u001b\u0002\u0154\u0156",
    "\u0005(\u0015\u0002\u0155\u0157\u0005&\u0014\u0002\u0156\u0155\u0003",
    "\u0002\u0002\u0002\u0156\u0157\u0003\u0002\u0002\u0002\u0157\u015a\u0003",
    "\u0002\u0002\u0002\u0158\u015b\u0007\u0004\u0002\u0002\u0159\u015b\u0005",
    "J&\u0002\u015a\u0158\u0003\u0002\u0002\u0002\u015a\u0159\u0003\u0002",
    "\u0002\u0002\u015b%\u0003\u0002\u0002\u0002\u015c\u015d\u0007\u001d",
    "\u0002\u0002\u015d\u015e\u00054\u001b\u0002\u015e\'\u0003\u0002\u0002",
    "\u0002\u015f\u0166\u0005\"\u0012\u0002\u0160\u0166\u0005H%\u0002\u0161",
    "\u0166\u0007n\u0002\u0002\u0162\u0166\u0007s\u0002\u0002\u0163\u0166",
    "\u0007p\u0002\u0002\u0164\u0166\u0007r\u0002\u0002\u0165\u015f\u0003",
    "\u0002\u0002\u0002\u0165\u0160\u0003\u0002\u0002\u0002\u0165\u0161\u0003",
    "\u0002\u0002\u0002\u0165\u0162\u0003\u0002\u0002\u0002\u0165\u0163\u0003",
    "\u0002\u0002\u0002\u0165\u0164\u0003\u0002\u0002\u0002\u0166\u0169\u0003",
    "\u0002\u0002\u0002\u0167\u0165\u0003\u0002\u0002\u0002\u0167\u0168\u0003",
    "\u0002\u0002\u0002\u0168)\u0003\u0002\u0002\u0002\u0169\u0167\u0003",
    "\u0002\u0002\u0002\u016a\u016b\u0007\u001e\u0002\u0002\u016b\u016c\u0005",
    "\u00a0Q\u0002\u016c\u016e\u00050\u0019\u0002\u016d\u016f\u0007l\u0002",
    "\u0002\u016e\u016d\u0003\u0002\u0002\u0002\u016e\u016f\u0003\u0002\u0002",
    "\u0002\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0171\u0007\u0004\u0002",
    "\u0002\u0171+\u0003\u0002\u0002\u0002\u0172\u0173\u0005\u00a0Q\u0002",
    "\u0173-\u0003\u0002\u0002\u0002\u0174\u0175\u0007\u001f\u0002\u0002",
    "\u0175\u0176\u0005\u00a0Q\u0002\u0176\u0178\u0007\u000e\u0002\u0002",
    "\u0177\u0179\u0005,\u0017\u0002\u0178\u0177\u0003\u0002\u0002\u0002",
    "\u0178\u0179\u0003\u0002\u0002\u0002\u0179\u017e\u0003\u0002\u0002\u0002",
    "\u017a\u017b\u0007\u000f\u0002\u0002\u017b\u017d\u0005,\u0017\u0002",
    "\u017c\u017a\u0003\u0002\u0002\u0002\u017d\u0180\u0003\u0002\u0002\u0002",
    "\u017e\u017c\u0003\u0002\u0002\u0002\u017e\u017f\u0003\u0002\u0002\u0002",
    "\u017f\u0181\u0003\u0002\u0002\u0002\u0180\u017e\u0003\u0002\u0002\u0002",
    "\u0181\u0182\u0007\u0010\u0002\u0002\u0182/\u0003\u0002\u0002\u0002",
    "\u0183\u018c\u0007\u0015\u0002\u0002\u0184\u0189\u00052\u001a\u0002",
    "\u0185\u0186\u0007\u000f\u0002\u0002\u0186\u0188\u00052\u001a\u0002",
    "\u0187\u0185\u0003\u0002\u0002\u0002\u0188\u018b\u0003\u0002\u0002\u0002",
    "\u0189\u0187\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002\u0002",
    "\u018a\u018d\u0003\u0002\u0002\u0002\u018b\u0189\u0003\u0002\u0002\u0002",
    "\u018c\u0184\u0003\u0002\u0002\u0002\u018c\u018d\u0003\u0002\u0002\u0002",
    "\u018d\u018e\u0003\u0002\u0002\u0002\u018e\u018f\u0007\u0016\u0002\u0002",
    "\u018f1\u0003\u0002\u0002\u0002\u0190\u0195\u0005> \u0002\u0191\u0194",
    "\u0005F$\u0002\u0192\u0194\u0007o\u0002\u0002\u0193\u0191\u0003\u0002",
    "\u0002\u0002\u0193\u0192\u0003\u0002\u0002\u0002\u0194\u0197\u0003\u0002",
    "\u0002\u0002\u0195\u0193\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002",
    "\u0002\u0002\u0196\u0199\u0003\u0002\u0002\u0002\u0197\u0195\u0003\u0002",
    "\u0002\u0002\u0198\u019a\u0005\u00a0Q\u0002\u0199\u0198\u0003\u0002",
    "\u0002\u0002\u0199\u019a\u0003\u0002\u0002\u0002\u019a3\u0003\u0002",
    "\u0002\u0002\u019b\u01a4\u0007\u0015\u0002\u0002\u019c\u01a1\u00056",
    "\u001c\u0002\u019d\u019e\u0007\u000f\u0002\u0002\u019e\u01a0\u00056",
    "\u001c\u0002\u019f\u019d\u0003\u0002\u0002\u0002\u01a0\u01a3\u0003\u0002",
    "\u0002\u0002\u01a1\u019f\u0003\u0002\u0002\u0002\u01a1\u01a2\u0003\u0002",
    "\u0002\u0002\u01a2\u01a5\u0003\u0002\u0002\u0002\u01a3\u01a1\u0003\u0002",
    "\u0002\u0002\u01a4\u019c\u0003\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002",
    "\u0002\u0002\u01a5\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a7\u0007\u0016",
    "\u0002\u0002\u01a75\u0003\u0002\u0002\u0002\u01a8\u01aa\u0005> \u0002",
    "\u01a9\u01ab\u0005F$\u0002\u01aa\u01a9\u0003\u0002\u0002\u0002\u01aa",
    "\u01ab\u0003\u0002\u0002\u0002\u01ab\u01ad\u0003\u0002\u0002\u0002\u01ac",
    "\u01ae\u0005\u00a0Q\u0002\u01ad\u01ac\u0003\u0002\u0002\u0002\u01ad",
    "\u01ae\u0003\u0002\u0002\u0002\u01ae7\u0003\u0002\u0002\u0002\u01af",
    "\u01b8\u0007\u0015\u0002\u0002\u01b0\u01b5\u0005:\u001e\u0002\u01b1",
    "\u01b2\u0007\u000f\u0002\u0002\u01b2\u01b4\u0005:\u001e\u0002\u01b3",
    "\u01b1\u0003\u0002\u0002\u0002\u01b4\u01b7\u0003\u0002\u0002\u0002\u01b5",
    "\u01b3\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003\u0002\u0002\u0002\u01b6",
    "\u01b9\u0003\u0002\u0002\u0002\u01b7\u01b5\u0003\u0002\u0002\u0002\u01b8",
    "\u01b0\u0003\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9",
    "\u01ba\u0003\u0002\u0002\u0002\u01ba\u01bb\u0007\u0016\u0002\u0002\u01bb",
    "9\u0003\u0002\u0002\u0002\u01bc\u01be\u0005> \u0002\u01bd\u01bf\u0005",
    "F$\u0002\u01be\u01bd\u0003\u0002\u0002\u0002\u01be\u01bf\u0003\u0002",
    "\u0002\u0002\u01bf;\u0003\u0002\u0002\u0002\u01c0\u01c2\u0005> \u0002",
    "\u01c1\u01c3\u0005F$\u0002\u01c2\u01c1\u0003\u0002\u0002\u0002\u01c2",
    "\u01c3\u0003\u0002\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4",
    "\u01c5\u0005\u00a0Q\u0002\u01c5=\u0003\u0002\u0002\u0002\u01c6\u01c7",
    "\b \u0001\u0002\u01c7\u01cc\u0005h5\u0002\u01c8\u01cc\u0005@!\u0002",
    "\u01c9\u01cc\u0005B\"\u0002\u01ca\u01cc\u0005D#\u0002\u01cb\u01c6\u0003",
    "\u0002\u0002\u0002\u01cb\u01c8\u0003\u0002\u0002\u0002\u01cb\u01c9\u0003",
    "\u0002\u0002\u0002\u01cb\u01ca\u0003\u0002\u0002\u0002\u01cc\u01d5\u0003",
    "\u0002\u0002\u0002\u01cd\u01ce\f\u0004\u0002\u0002\u01ce\u01d0\u0007",
    " \u0002\u0002\u01cf\u01d1\u0005j6\u0002\u01d0\u01cf\u0003\u0002\u0002",
    "\u0002\u01d0\u01d1\u0003\u0002\u0002\u0002\u01d1\u01d2\u0003\u0002\u0002",
    "\u0002\u01d2\u01d4\u0007!\u0002\u0002\u01d3\u01cd\u0003\u0002\u0002",
    "\u0002\u01d4\u01d7\u0003\u0002\u0002\u0002\u01d5\u01d3\u0003\u0002\u0002",
    "\u0002\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d6?\u0003\u0002\u0002",
    "\u0002\u01d7\u01d5\u0003\u0002\u0002\u0002\u01d8\u01dd\u0005\u00a0Q",
    "\u0002\u01d9\u01da\u0007\"\u0002\u0002\u01da\u01dc\u0005\u00a0Q\u0002",
    "\u01db\u01d9\u0003\u0002\u0002\u0002\u01dc\u01df\u0003\u0002\u0002\u0002",
    "\u01dd\u01db\u0003\u0002\u0002\u0002\u01dd\u01de\u0003\u0002\u0002\u0002",
    "\u01deA\u0003\u0002\u0002\u0002\u01df\u01dd\u0003\u0002\u0002\u0002",
    "\u01e0\u01e1\u0007#\u0002\u0002\u01e1\u01e2\u0007\u0015\u0002\u0002",
    "\u01e2\u01e3\u0005h5\u0002\u01e3\u01e4\u0007$\u0002\u0002\u01e4\u01e5",
    "\u0005> \u0002\u01e5\u01e6\u0007\u0016\u0002\u0002\u01e6C\u0003\u0002",
    "\u0002\u0002\u01e7\u01e8\u0007\u001c\u0002\u0002\u01e8\u01ee\u00058",
    "\u001d\u0002\u01e9\u01ed\u0007p\u0002\u0002\u01ea\u01ed\u0007n\u0002",
    "\u0002\u01eb\u01ed\u0005H%\u0002\u01ec\u01e9\u0003\u0002\u0002\u0002",
    "\u01ec\u01ea\u0003\u0002\u0002\u0002\u01ec\u01eb\u0003\u0002\u0002\u0002",
    "\u01ed\u01f0\u0003\u0002\u0002\u0002\u01ee\u01ec\u0003\u0002\u0002\u0002",
    "\u01ee\u01ef\u0003\u0002\u0002\u0002\u01ef\u01f3\u0003\u0002\u0002\u0002",
    "\u01f0\u01ee\u0003\u0002\u0002\u0002\u01f1\u01f2\u0007\u001d\u0002\u0002",
    "\u01f2\u01f4\u00058\u001d\u0002\u01f3\u01f1\u0003\u0002\u0002\u0002",
    "\u01f3\u01f4\u0003\u0002\u0002\u0002\u01f4E\u0003\u0002\u0002\u0002",
    "\u01f5\u01f6\t\u0005\u0002\u0002\u01f6G\u0003\u0002\u0002\u0002\u01f7",
    "\u01f8\t\u0006\u0002\u0002\u01f8I\u0003\u0002\u0002\u0002\u01f9\u01fd",
    "\u0007\u000e\u0002\u0002\u01fa\u01fc\u0005L\'\u0002\u01fb\u01fa\u0003",
    "\u0002\u0002\u0002\u01fc\u01ff\u0003\u0002\u0002\u0002\u01fd\u01fb\u0003",
    "\u0002\u0002\u0002\u01fd\u01fe\u0003\u0002\u0002\u0002\u01fe\u0200\u0003",
    "\u0002\u0002\u0002\u01ff\u01fd\u0003\u0002\u0002\u0002\u0200\u0201\u0007",
    "\u0010\u0002\u0002\u0201K\u0003\u0002\u0002\u0002\u0202\u020e\u0005",
    "P)\u0002\u0203\u020e\u0005R*\u0002\u0204\u020e\u0005V,\u0002\u0205\u020e",
    "\u0005J&\u0002\u0206\u020e\u0005X-\u0002\u0207\u020e\u0005Z.\u0002\u0208",
    "\u020e\u0005\\/\u0002\u0209\u020e\u0005^0\u0002\u020a\u020e\u0005`1",
    "\u0002\u020b\u020e\u0005b2\u0002\u020c\u020e\u0005T+\u0002\u020d\u0202",
    "\u0003\u0002\u0002\u0002\u020d\u0203\u0003\u0002\u0002\u0002\u020d\u0204",
    "\u0003\u0002\u0002\u0002\u020d\u0205\u0003\u0002\u0002\u0002\u020d\u0206",
    "\u0003\u0002\u0002\u0002\u020d\u0207\u0003\u0002\u0002\u0002\u020d\u0208",
    "\u0003\u0002\u0002\u0002\u020d\u0209\u0003\u0002\u0002\u0002\u020d\u020a",
    "\u0003\u0002\u0002\u0002\u020d\u020b\u0003\u0002\u0002\u0002\u020d\u020c",
    "\u0003\u0002\u0002\u0002\u020eM\u0003\u0002\u0002\u0002\u020f\u0210",
    "\u0005j6\u0002\u0210\u0211\u0007\u0004\u0002\u0002\u0211O\u0003\u0002",
    "\u0002\u0002\u0212\u0213\u0007\'\u0002\u0002\u0213\u0214\u0007\u0015",
    "\u0002\u0002\u0214\u0215\u0005j6\u0002\u0215\u0216\u0007\u0016\u0002",
    "\u0002\u0216\u0219\u0005L\'\u0002\u0217\u0218\u0007(\u0002\u0002\u0218",
    "\u021a\u0005L\'\u0002\u0219\u0217\u0003\u0002\u0002\u0002\u0219\u021a",
    "\u0003\u0002\u0002\u0002\u021aQ\u0003\u0002\u0002\u0002\u021b\u021c",
    "\u0007)\u0002\u0002\u021c\u021d\u0007\u0015\u0002\u0002\u021d\u021e",
    "\u0005j6\u0002\u021e\u021f\u0007\u0016\u0002\u0002\u021f\u0220\u0005",
    "L\'\u0002\u0220S\u0003\u0002\u0002\u0002\u0221\u0224\u0005d3\u0002\u0222",
    "\u0224\u0005N(\u0002\u0223\u0221\u0003\u0002\u0002\u0002\u0223\u0222",
    "\u0003\u0002\u0002\u0002\u0224U\u0003\u0002\u0002\u0002\u0225\u0226",
    "\u0007\u0019\u0002\u0002\u0226\u0229\u0007\u0015\u0002\u0002\u0227\u022a",
    "\u0005T+\u0002\u0228\u022a\u0007\u0004\u0002\u0002\u0229\u0227\u0003",
    "\u0002\u0002\u0002\u0229\u0228\u0003\u0002\u0002\u0002\u022a\u022c\u0003",
    "\u0002\u0002\u0002\u022b\u022d\u0005j6\u0002\u022c\u022b\u0003\u0002",
    "\u0002\u0002\u022c\u022d\u0003\u0002\u0002\u0002\u022d\u022e\u0003\u0002",
    "\u0002\u0002\u022e\u0230\u0007\u0004\u0002\u0002\u022f\u0231\u0005j",
    "6\u0002\u0230\u022f\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002",
    "\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0233\u0007\u0016",
    "\u0002\u0002\u0233\u0234\u0005L\'\u0002\u0234W\u0003\u0002\u0002\u0002",
    "\u0235\u0237\u0007*\u0002\u0002\u0236\u0238\u0007w\u0002\u0002\u0237",
    "\u0236\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002\u0002\u0002\u0238",
    "\u0239\u0003\u0002\u0002\u0002\u0239\u023a\u0005v<\u0002\u023aY\u0003",
    "\u0002\u0002\u0002\u023b\u023c\u0007+\u0002\u0002\u023c\u023d\u0005",
    "L\'\u0002\u023d\u023e\u0007)\u0002\u0002\u023e\u023f\u0007\u0015\u0002",
    "\u0002\u023f\u0240\u0005j6\u0002\u0240\u0241\u0007\u0016\u0002\u0002",
    "\u0241\u0242\u0007\u0004\u0002\u0002\u0242[\u0003\u0002\u0002\u0002",
    "\u0243\u0244\u0007,\u0002\u0002\u0244\u0245\u0007\u0004\u0002\u0002",
    "\u0245]\u0003\u0002\u0002\u0002\u0246\u0247\u0007-\u0002\u0002\u0247",
    "\u0248\u0007\u0004\u0002\u0002\u0248_\u0003\u0002\u0002\u0002\u0249",
    "\u024b\u0007.\u0002\u0002\u024a\u024c\u0005j6\u0002\u024b\u024a\u0003",
    "\u0002\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u024d\u0003",
    "\u0002\u0002\u0002\u024d\u024e\u0007\u0004\u0002\u0002\u024ea\u0003",
    "\u0002\u0002\u0002\u024f\u0250\u0007/\u0002\u0002\u0250\u0251\u0007",
    "\u0004\u0002\u0002\u0251c\u0003\u0002\u0002\u0002\u0252\u0253\u0007",
    "0\u0002\u0002\u0253\u0256\u0005f4\u0002\u0254\u0256\u0005<\u001f\u0002",
    "\u0255\u0252\u0003\u0002\u0002\u0002\u0255\u0254\u0003\u0002\u0002\u0002",
    "\u0256\u0259\u0003\u0002\u0002\u0002\u0257\u0258\u0007\u0017\u0002\u0002",
    "\u0258\u025a\u0005j6\u0002\u0259\u0257\u0003\u0002\u0002\u0002\u0259",
    "\u025a\u0003\u0002\u0002\u0002\u025a\u025b\u0003\u0002\u0002\u0002\u025b",
    "\u025c\u0007\u0004\u0002\u0002\u025ce\u0003\u0002\u0002\u0002\u025d",
    "\u0264\u0007\u0015\u0002\u0002\u025e\u0260\u0005\u00a0Q\u0002\u025f",
    "\u025e\u0003\u0002\u0002\u0002\u025f\u0260\u0003\u0002\u0002\u0002\u0260",
    "\u0261\u0003\u0002\u0002\u0002\u0261\u0263\u0007\u000f\u0002\u0002\u0262",
    "\u025f\u0003\u0002\u0002\u0002\u0263\u0266\u0003\u0002\u0002\u0002\u0264",
    "\u0262\u0003\u0002\u0002\u0002\u0264\u0265\u0003\u0002\u0002\u0002\u0265",
    "\u0268\u0003\u0002\u0002\u0002\u0266\u0264\u0003\u0002\u0002\u0002\u0267",
    "\u0269\u0005\u00a0Q\u0002\u0268\u0267\u0003\u0002\u0002\u0002\u0268",
    "\u0269\u0003\u0002\u0002\u0002\u0269\u026a\u0003\u0002\u0002\u0002\u026a",
    "\u026b\u0007\u0016\u0002\u0002\u026bg\u0003\u0002\u0002\u0002\u026c",
    "\u026d\t\u0007\u0002\u0002\u026di\u0003\u0002\u0002\u0002\u026e\u026f",
    "\b6\u0001\u0002\u026f\u0270\u00076\u0002\u0002\u0270\u0281\u0005> \u0002",
    "\u0271\u0272\u0007\u0015\u0002\u0002\u0272\u0273\u0005j6\u0002\u0273",
    "\u0274\u0007\u0016\u0002\u0002\u0274\u0281\u0003\u0002\u0002\u0002\u0275",
    "\u0276\t\b\u0002\u0002\u0276\u0281\u0005j6\u0015\u0277\u0278\t\t\u0002",
    "\u0002\u0278\u0281\u0005j6\u0014\u0279\u027a\t\n\u0002\u0002\u027a\u0281",
    "\u0005j6\u0013\u027b\u027c\u0007;\u0002\u0002\u027c\u0281\u0005j6\u0012",
    "\u027d\u027e\u0007<\u0002\u0002\u027e\u0281\u0005j6\u0011\u027f\u0281",
    "\u0005l7\u0002\u0280\u026e\u0003\u0002\u0002\u0002\u0280\u0271\u0003",
    "\u0002\u0002\u0002\u0280\u0275\u0003\u0002\u0002\u0002\u0280\u0277\u0003",
    "\u0002\u0002\u0002\u0280\u0279\u0003\u0002\u0002\u0002\u0280\u027b\u0003",
    "\u0002\u0002\u0002\u0280\u027d\u0003\u0002\u0002\u0002\u0280\u027f\u0003",
    "\u0002\u0002\u0002\u0281\u02bd\u0003\u0002\u0002\u0002\u0282\u0283\f",
    "\u0010\u0002\u0002\u0283\u0284\u0007=\u0002\u0002\u0284\u02bc\u0005",
    "j6\u0011\u0285\u0286\f\u000f\u0002\u0002\u0286\u0287\t\u000b\u0002\u0002",
    "\u0287\u02bc\u0005j6\u0010\u0288\u0289\f\u000e\u0002\u0002\u0289\u028a",
    "\t\t\u0002\u0002\u028a\u02bc\u0005j6\u000f\u028b\u028c\f\r\u0002\u0002",
    "\u028c\u028d\t\f\u0002\u0002\u028d\u02bc\u0005j6\u000e\u028e\u028f\f",
    "\f\u0002\u0002\u028f\u0290\u0007B\u0002\u0002\u0290\u02bc\u0005j6\r",
    "\u0291\u0292\f\u000b\u0002\u0002\u0292\u0293\u0007\u0005\u0002\u0002",
    "\u0293\u02bc\u0005j6\f\u0294\u0295\f\n\u0002\u0002\u0295\u0296\u0007",
    "C\u0002\u0002\u0296\u02bc\u0005j6\u000b\u0297\u0298\f\t\u0002\u0002",
    "\u0298\u0299\t\r\u0002\u0002\u0299\u02bc\u0005j6\n\u029a\u029b\f\b\u0002",
    "\u0002\u029b\u029c\t\u000e\u0002\u0002\u029c\u02bc\u0005j6\t\u029d\u029e",
    "\f\u0007\u0002\u0002\u029e\u029f\u0007F\u0002\u0002\u029f\u02bc\u0005",
    "j6\b\u02a0\u02a1\f\u0006\u0002\u0002\u02a1\u02a2\u0007G\u0002\u0002",
    "\u02a2\u02bc\u0005j6\u0007\u02a3\u02a4\f\u0005\u0002\u0002\u02a4\u02a5",
    "\u0007H\u0002\u0002\u02a5\u02a6\u0005j6\u0002\u02a6\u02a7\u0007I\u0002",
    "\u0002\u02a7\u02a8\u0005j6\u0006\u02a8\u02bc\u0003\u0002\u0002\u0002",
    "\u02a9\u02aa\f\u0004\u0002\u0002\u02aa\u02ab\t\u000f\u0002\u0002\u02ab",
    "\u02bc\u0005j6\u0005\u02ac\u02ad\f\u001b\u0002\u0002\u02ad\u02bc\t\b",
    "\u0002\u0002\u02ae\u02af\f\u0019\u0002\u0002\u02af\u02b0\u0007 \u0002",
    "\u0002\u02b0\u02b1\u0005j6\u0002\u02b1\u02b2\u0007!\u0002\u0002\u02b2",
    "\u02bc\u0003\u0002\u0002\u0002\u02b3\u02b4\f\u0018\u0002\u0002\u02b4",
    "\u02b5\u0007\u0015\u0002\u0002\u02b5\u02b6\u0005t;\u0002\u02b6\u02b7",
    "\u0007\u0016\u0002\u0002\u02b7\u02bc\u0003\u0002\u0002\u0002\u02b8\u02b9",
    "\f\u0017\u0002\u0002\u02b9\u02ba\u0007\"\u0002\u0002\u02ba\u02bc\u0005",
    "\u00a0Q\u0002\u02bb\u0282\u0003\u0002\u0002\u0002\u02bb\u0285\u0003",
    "\u0002\u0002\u0002\u02bb\u0288\u0003\u0002\u0002\u0002\u02bb\u028b\u0003",
    "\u0002\u0002\u0002\u02bb\u028e\u0003\u0002\u0002\u0002\u02bb\u0291\u0003",
    "\u0002\u0002\u0002\u02bb\u0294\u0003\u0002\u0002\u0002\u02bb\u0297\u0003",
    "\u0002\u0002\u0002\u02bb\u029a\u0003\u0002\u0002\u0002\u02bb\u029d\u0003",
    "\u0002\u0002\u0002\u02bb\u02a0\u0003\u0002\u0002\u0002\u02bb\u02a3\u0003",
    "\u0002\u0002\u0002\u02bb\u02a9\u0003\u0002\u0002\u0002\u02bb\u02ac\u0003",
    "\u0002\u0002\u0002\u02bb\u02ae\u0003\u0002\u0002\u0002\u02bb\u02b3\u0003",
    "\u0002\u0002\u0002\u02bb\u02b8\u0003\u0002\u0002\u0002\u02bc\u02bf\u0003",
    "\u0002\u0002\u0002\u02bd\u02bb\u0003\u0002\u0002\u0002\u02bd\u02be\u0003",
    "\u0002\u0002\u0002\u02bek\u0003\u0002\u0002\u0002\u02bf\u02bd\u0003",
    "\u0002\u0002\u0002\u02c0\u02c8\u0007f\u0002\u0002\u02c1\u02c8\u0005",
    "\u009eP\u0002\u02c2\u02c8\u0007j\u0002\u0002\u02c3\u02c8\u0007w\u0002",
    "\u0002\u02c4\u02c8\u0005\u00a0Q\u0002\u02c5\u02c8\u0005\u009aN\u0002",
    "\u02c6\u02c8\u0005\u009cO\u0002\u02c7\u02c0\u0003\u0002\u0002\u0002",
    "\u02c7\u02c1\u0003\u0002\u0002\u0002\u02c7\u02c2\u0003\u0002\u0002\u0002",
    "\u02c7\u02c3\u0003\u0002\u0002\u0002\u02c7\u02c4\u0003\u0002\u0002\u0002",
    "\u02c7\u02c5\u0003\u0002\u0002\u0002\u02c7\u02c6\u0003\u0002\u0002\u0002",
    "\u02c8m\u0003\u0002\u0002\u0002\u02c9\u02ce\u0005j6\u0002\u02ca\u02cb",
    "\u0007\u000f\u0002\u0002\u02cb\u02cd\u0005j6\u0002\u02cc\u02ca\u0003",
    "\u0002\u0002\u0002\u02cd\u02d0\u0003\u0002\u0002\u0002\u02ce\u02cc\u0003",
    "\u0002\u0002\u0002\u02ce\u02cf\u0003\u0002\u0002\u0002\u02cfo\u0003",
    "\u0002\u0002\u0002\u02d0\u02ce\u0003\u0002\u0002\u0002\u02d1\u02d6\u0005",
    "r:\u0002\u02d2\u02d3\u0007\u000f\u0002\u0002\u02d3\u02d5\u0005r:\u0002",
    "\u02d4\u02d2\u0003\u0002\u0002\u0002\u02d5\u02d8\u0003\u0002\u0002\u0002",
    "\u02d6\u02d4\u0003\u0002\u0002\u0002\u02d6\u02d7\u0003\u0002\u0002\u0002",
    "\u02d7\u02da\u0003\u0002\u0002\u0002\u02d8\u02d6\u0003\u0002\u0002\u0002",
    "\u02d9\u02db\u0007\u000f\u0002\u0002\u02da\u02d9\u0003\u0002\u0002\u0002",
    "\u02da\u02db\u0003\u0002\u0002\u0002\u02dbq\u0003\u0002\u0002\u0002",
    "\u02dc\u02dd\u0005\u00a0Q\u0002\u02dd\u02de\u0007I\u0002\u0002\u02de",
    "\u02df\u0005j6\u0002\u02dfs\u0003\u0002\u0002\u0002\u02e0\u02e2\u0007",
    "\u000e\u0002\u0002\u02e1\u02e3\u0005p9\u0002\u02e2\u02e1\u0003\u0002",
    "\u0002\u0002\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u02e4\u0003\u0002",
    "\u0002\u0002\u02e4\u02e9\u0007\u0010\u0002\u0002\u02e5\u02e7\u0005n",
    "8\u0002\u02e6\u02e5\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002",
    "\u0002\u0002\u02e7\u02e9\u0003\u0002\u0002\u0002\u02e8\u02e0\u0003\u0002",
    "\u0002\u0002\u02e8\u02e6\u0003\u0002\u0002\u0002\u02e9u\u0003\u0002",
    "\u0002\u0002\u02ea\u02ee\u0007\u000e\u0002\u0002\u02eb\u02ed\u0005x",
    "=\u0002\u02ec\u02eb\u0003\u0002\u0002\u0002\u02ed\u02f0\u0003\u0002",
    "\u0002\u0002\u02ee\u02ec\u0003\u0002\u0002\u0002\u02ee\u02ef\u0003\u0002",
    "\u0002\u0002\u02ef\u02f1\u0003\u0002\u0002\u0002\u02f0\u02ee\u0003\u0002",
    "\u0002\u0002\u02f1\u02f2\u0007\u0010\u0002\u0002\u02f2w\u0003\u0002",
    "\u0002\u0002\u02f3\u0308\u0005\u00a0Q\u0002\u02f4\u0308\u0005v<\u0002",
    "\u02f5\u0308\u0005z>\u0002\u02f6\u0308\u0005~@\u0002\u02f7\u0308\u0005",
    "\u0080A\u0002\u02f8\u0308\u0005\u0086D\u0002\u02f9\u0308\u0005\u0088",
    "E\u0002\u02fa\u0308\u0005\u008aF\u0002\u02fb\u0308\u0005\u008eH\u0002",
    "\u02fc\u0308\u0005\u0090I\u0002\u02fd\u0308\u0007-\u0002\u0002\u02fe",
    "\u0308\u0007,\u0002\u0002\u02ff\u0308\u0005\u0094K\u0002\u0300\u0308",
    "\u0005\u0096L\u0002\u0301\u0308\u0005\u0098M\u0002\u0302\u0308\u0007",
    "T\u0002\u0002\u0303\u0308\u0007U\u0002\u0002\u0304\u0308\u0005\u009e",
    "P\u0002\u0305\u0308\u0007w\u0002\u0002\u0306\u0308\u0007j\u0002\u0002",
    "\u0307\u02f3\u0003\u0002\u0002\u0002\u0307\u02f4\u0003\u0002\u0002\u0002",
    "\u0307\u02f5\u0003\u0002\u0002\u0002\u0307\u02f6\u0003\u0002\u0002\u0002",
    "\u0307\u02f7\u0003\u0002\u0002\u0002\u0307\u02f8\u0003\u0002\u0002\u0002",
    "\u0307\u02f9\u0003\u0002\u0002\u0002\u0307\u02fa\u0003\u0002\u0002\u0002",
    "\u0307\u02fb\u0003\u0002\u0002\u0002\u0307\u02fc\u0003\u0002\u0002\u0002",
    "\u0307\u02fd\u0003\u0002\u0002\u0002\u0307\u02fe\u0003\u0002\u0002\u0002",
    "\u0307\u02ff\u0003\u0002\u0002\u0002\u0307\u0300\u0003\u0002\u0002\u0002",
    "\u0307\u0301\u0003\u0002\u0002\u0002\u0307\u0302\u0003\u0002\u0002\u0002",
    "\u0307\u0303\u0003\u0002\u0002\u0002\u0307\u0304\u0003\u0002\u0002\u0002",
    "\u0307\u0305\u0003\u0002\u0002\u0002\u0307\u0306\u0003\u0002\u0002\u0002",
    "\u0308y\u0003\u0002\u0002\u0002\u0309\u030c\u0005|?\u0002\u030a\u030c",
    "\u0005\u0092J\u0002\u030b\u0309\u0003\u0002\u0002\u0002\u030b\u030a",
    "\u0003\u0002\u0002\u0002\u030c{\u0003\u0002\u0002\u0002\u030d\u031a",
    "\t\u0010\u0002\u0002\u030e\u0310\u0007\u0015\u0002\u0002\u030f\u0311",
    "\u0005z>\u0002\u0310\u030f\u0003\u0002\u0002\u0002\u0310\u0311\u0003",
    "\u0002\u0002\u0002\u0311\u0316\u0003\u0002\u0002\u0002\u0312\u0313\u0007",
    "\u000f\u0002\u0002\u0313\u0315\u0005z>\u0002\u0314\u0312\u0003\u0002",
    "\u0002\u0002\u0315\u0318\u0003\u0002\u0002\u0002\u0316\u0314\u0003\u0002",
    "\u0002\u0002\u0316\u0317\u0003\u0002\u0002\u0002\u0317\u0319\u0003\u0002",
    "\u0002\u0002\u0318\u0316\u0003\u0002\u0002\u0002\u0319\u031b\u0007\u0016",
    "\u0002\u0002\u031a\u030e\u0003\u0002\u0002\u0002\u031a\u031b\u0003\u0002",
    "\u0002\u0002\u031b}\u0003\u0002\u0002\u0002\u031c\u031d\u0007W\u0002",
    "\u0002\u031d\u031e\u0005\u0082B\u0002\u031e\u031f\u0007X\u0002\u0002",
    "\u031f\u0320\u0005z>\u0002\u0320\u007f\u0003\u0002\u0002\u0002\u0321",
    "\u0322\u0005\u0082B\u0002\u0322\u0323\u0007X\u0002\u0002\u0323\u0324",
    "\u0005z>\u0002\u0324\u0081\u0003\u0002\u0002\u0002\u0325\u032b\u0005",
    "\u00a0Q\u0002\u0326\u0327\u0007\u0015\u0002\u0002\u0327\u0328\u0005",
    "\u0084C\u0002\u0328\u0329\u0007\u0016\u0002\u0002\u0329\u032b\u0003",
    "\u0002\u0002\u0002\u032a\u0325\u0003\u0002\u0002\u0002\u032a\u0326\u0003",
    "\u0002\u0002\u0002\u032b\u0083\u0003\u0002\u0002\u0002\u032c\u0331\u0007",
    "v\u0002\u0002\u032d\u032e\u0007\u000f\u0002\u0002\u032e\u0330\u0007",
    "v\u0002\u0002\u032f\u032d\u0003\u0002\u0002\u0002\u0330\u0333\u0003",
    "\u0002\u0002\u0002\u0331\u032f\u0003\u0002\u0002\u0002\u0331\u0332\u0003",
    "\u0002\u0002\u0002\u0332\u0085\u0003\u0002\u0002\u0002\u0333\u0331\u0003",
    "\u0002\u0002\u0002\u0334\u0335\u0007Y\u0002\u0002\u0335\u0336\u0007",
    "v\u0002\u0002\u0336\u0087\u0003\u0002\u0002\u0002\u0337\u0338\u0007",
    "v\u0002\u0002\u0338\u0339\u0007I\u0002\u0002\u0339\u0089\u0003\u0002",
    "\u0002\u0002\u033a\u033b\u0007Z\u0002\u0002\u033b\u033f\u0005z>\u0002",
    "\u033c\u033e\u0005\u008cG\u0002\u033d\u033c\u0003\u0002\u0002\u0002",
    "\u033e\u0341\u0003\u0002\u0002\u0002\u033f\u033d\u0003\u0002\u0002\u0002",
    "\u033f\u0340\u0003\u0002\u0002\u0002\u0340\u0345\u0003\u0002\u0002\u0002",
    "\u0341\u033f\u0003\u0002\u0002\u0002\u0342\u0343\u0007[\u0002\u0002",
    "\u0343\u0344\u0007I\u0002\u0002\u0344\u0346\u0005v<\u0002\u0345\u0342",
    "\u0003\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346\u008b",
    "\u0003\u0002\u0002\u0002\u0347\u0348\u0007\\\u0002\u0002\u0348\u0349",
    "\u0005\u0092J\u0002\u0349\u034a\u0007I\u0002\u0002\u034a\u034b\u0005",
    "v<\u0002\u034b\u008d\u0003\u0002\u0002\u0002\u034c\u034d\u0007\u001c",
    "\u0002\u0002\u034d\u034e\u0007v\u0002\u0002\u034e\u0350\u0007\u0015",
    "\u0002\u0002\u034f\u0351\u0005\u0084C\u0002\u0350\u034f\u0003\u0002",
    "\u0002\u0002\u0350\u0351\u0003\u0002\u0002\u0002\u0351\u0352\u0003\u0002",
    "\u0002\u0002\u0352\u0355\u0007\u0016\u0002\u0002\u0353\u0354\u0007]",
    "\u0002\u0002\u0354\u0356\u0005\u0084C\u0002\u0355\u0353\u0003\u0002",
    "\u0002\u0002\u0355\u0356\u0003\u0002\u0002\u0002\u0356\u0357\u0003\u0002",
    "\u0002\u0002\u0357\u0358\u0005v<\u0002\u0358\u008f\u0003\u0002\u0002",
    "\u0002\u0359\u035c\u0007\u0019\u0002\u0002\u035a\u035d\u0005v<\u0002",
    "\u035b\u035d\u0005z>\u0002\u035c\u035a\u0003\u0002\u0002\u0002\u035c",
    "\u035b\u0003\u0002\u0002\u0002\u035d\u035e\u0003\u0002\u0002\u0002\u035e",
    "\u0361\u0005z>\u0002\u035f\u0362\u0005v<\u0002\u0360\u0362\u0005z>\u0002",
    "\u0361\u035f\u0003\u0002\u0002\u0002\u0361\u0360\u0003\u0002\u0002\u0002",
    "\u0362\u0363\u0003\u0002\u0002\u0002\u0363\u0364\u0005v<\u0002\u0364",
    "\u0091\u0003\u0002\u0002\u0002\u0365\u0366\t\u0011\u0002\u0002\u0366",
    "\u0093\u0003\u0002\u0002\u0002\u0367\u0368\u0007*\u0002\u0002\u0368",
    "\u0369\u0007v\u0002\u0002\u0369\u036a\u0005v<\u0002\u036a\u0095\u0003",
    "\u0002\u0002\u0002\u036b\u036c\u0007^\u0002\u0002\u036c\u036d\u0007",
    "\u0015\u0002\u0002\u036d\u036e\u0007w\u0002\u0002\u036e\u036f\u0007",
    "\u0016\u0002\u0002\u036f\u0097\u0003\u0002\u0002\u0002\u0370\u0371\u0007",
    "_\u0002\u0002\u0371\u0372\u0007\u0015\u0002\u0002\u0372\u0373\u0007",
    "w\u0002\u0002\u0373\u0374\u0007\u0016\u0002\u0002\u0374\u0099\u0003",
    "\u0002\u0002\u0002\u0375\u0377\u0007\u0015\u0002\u0002\u0376\u0378\u0005",
    "j6\u0002\u0377\u0376\u0003\u0002\u0002\u0002\u0377\u0378\u0003\u0002",
    "\u0002\u0002\u0378\u037f\u0003\u0002\u0002\u0002\u0379\u037b\u0007\u000f",
    "\u0002\u0002\u037a\u037c\u0005j6\u0002\u037b\u037a\u0003\u0002\u0002",
    "\u0002\u037b\u037c\u0003\u0002\u0002\u0002\u037c\u037e\u0003\u0002\u0002",
    "\u0002\u037d\u0379\u0003\u0002\u0002\u0002\u037e\u0381\u0003\u0002\u0002",
    "\u0002\u037f\u037d\u0003\u0002\u0002\u0002\u037f\u0380\u0003\u0002\u0002",
    "\u0002\u0380\u0382\u0003\u0002\u0002\u0002\u0381\u037f\u0003\u0002\u0002",
    "\u0002\u0382\u0390\u0007\u0016\u0002\u0002\u0383\u038c\u0007 \u0002",
    "\u0002\u0384\u0389\u0005j6\u0002\u0385\u0386\u0007\u000f\u0002\u0002",
    "\u0386\u0388\u0005j6\u0002\u0387\u0385\u0003\u0002\u0002\u0002\u0388",
    "\u038b\u0003\u0002\u0002\u0002\u0389\u0387\u0003\u0002\u0002\u0002\u0389",
    "\u038a\u0003\u0002\u0002\u0002\u038a\u038d\u0003\u0002\u0002\u0002\u038b",
    "\u0389\u0003\u0002\u0002\u0002\u038c\u0384\u0003\u0002\u0002\u0002\u038c",
    "\u038d\u0003\u0002\u0002\u0002\u038d\u038e\u0003\u0002\u0002\u0002\u038e",
    "\u0390\u0007!\u0002\u0002\u038f\u0375\u0003\u0002\u0002\u0002\u038f",
    "\u0383\u0003\u0002\u0002\u0002\u0390\u009b\u0003\u0002\u0002\u0002\u0391",
    "\u0392\u0005h5\u0002\u0392\u009d\u0003\u0002\u0002\u0002\u0393\u0395",
    "\t\u0012\u0002\u0002\u0394\u0396\u0007i\u0002\u0002\u0395\u0394\u0003",
    "\u0002\u0002\u0002\u0395\u0396\u0003\u0002\u0002\u0002\u0396\u009f\u0003",
    "\u0002\u0002\u0002\u0397\u0398\t\u0013\u0002\u0002\u0398\u00a1\u0003",
    "\u0002\u0002\u0002d\u00a5\u00a7\u00b5\u00b9\u00be\u00c5\u00cb\u00d1",
    "\u00d5\u00e1\u00e9\u00f3\u00f6\u00fc\u0108\u010d\u0116\u011c\u0122\u012b",
    "\u0139\u013c\u0143\u014a\u014d\u0151\u0156\u015a\u0165\u0167\u016e\u0178",
    "\u017e\u0189\u018c\u0193\u0195\u0199\u01a1\u01a4\u01aa\u01ad\u01b5\u01b8",
    "\u01be\u01c2\u01cb\u01d0\u01d5\u01dd\u01ec\u01ee\u01f3\u01fd\u020d\u0219",
    "\u0223\u0229\u022c\u0230\u0237\u024b\u0255\u0259\u025f\u0264\u0268\u0280",
    "\u02bb\u02bd\u02c7\u02ce\u02d6\u02da\u02e2\u02e6\u02e8\u02ee\u0307\u030b",
    "\u0310\u0316\u031a\u032a\u0331\u033f\u0345\u0350\u0355\u035c\u0361\u0377",
    "\u037b\u037f\u0389\u038c\u038f\u0395"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'pragma'", "';'", "'^'", "'>='", "'>'", "'<'", 
                     "'<='", "'as'", "'import'", "'*'", "'from'", "'{'", 
                     "','", "'}'", "'contract'", "'interface'", "'library'", 
                     "'is'", "'('", "')'", "'='", "'using'", "'for'", "'struct'", 
                     "'modifier'", "'function'", "'returns'", "'event'", 
                     "'enum'", "'['", "']'", "'.'", "'mapping'", "'=>'", 
                     "'memory'", "'storage'", "'if'", "'else'", "'while'", 
                     "'assembly'", "'do'", "'continue'", "'break'", "'return'", 
                     "'throw'", "'var'", "'address'", "'bool'", "'string'", 
                     "'++'", "'--'", "'new'", "'+'", "'-'", "'after'", "'delete'", 
                     "'!'", "'~'", "'**'", "'/'", "'%'", "'<<'", "'>>'", 
                     "'&'", "'|'", "'=='", "'!='", "'&&'", "'||'", "'?'", 
                     "':'", "'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", 
                     "'-='", "'*='", "'/='", "'%='", "'errorLabel'", "'bytecodeSize'", 
                     "'byte'", "'let'", "':='", "'=:'", "'switch'", "'default'", 
                     "'case'", "'->'", "'dataSize'", "'linkerSymbol'", null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, "'anonymous'", "'constant'", "'external'", 
                     "'indexed'", "'internal'", "'payable'", "'private'", 
                     "'public'", "'pure'", "'view'" ];

var symbolicNames = [ null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, null, null, null, null, null, 
                      null, null, null, null, "Int", "Uint", "Byte", "Fixed", 
                      "Ufixed", "VersionLiteral", "BooleanLiteral", "DecimalNumber", 
                      "HexNumber", "NumberUnit", "HexLiteral", "ReservedKeyword", 
                      "AnonymousKeyword", "ConstantKeyword", "ExternalKeyword", 
                      "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
                      "PrivateKeyword", "PublicKeyword", "PureKeyword", 
                      "ViewKeyword", "Identifier", "StringLiteral", "WS", 
                      "COMMENT", "LINE_COMMENT" ];

var ruleNames =  [ "sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", 
                   "version", "versionOperator", "versionConstraint", "importDeclaration", 
                   "importDirective", "contractDefinition", "inheritanceSpecifier", 
                   "contractPart", "stateVariableDeclaration", "usingForDeclaration", 
                   "structDefinition", "modifierDefinition", "modifierInvocation", 
                   "functionDefinition", "returnParameters", "modifierList", 
                   "eventDefinition", "enumValue", "enumDefinition", "indexedParameterList", 
                   "indexedParameter", "parameterList", "parameter", "typeNameList", 
                   "unnamedParameter", "variableDeclaration", "typeName", 
                   "userDefinedTypeName", "mapping", "functionTypeName", 
                   "storageLocation", "stateMutability", "block", "statement", 
                   "expressionStatement", "ifStatement", "whileStatement", 
                   "simpleStatement", "forStatement", "inlineAssemblyStatement", 
                   "doWhileStatement", "continueStatement", "breakStatement", 
                   "returnStatement", "throwStatement", "variableDeclarationStatement", 
                   "identifierList", "elementaryTypeName", "expression", 
                   "primaryExpression", "expressionList", "nameValueList", 
                   "nameValue", "functionCallArguments", "assemblyBlock", 
                   "assemblyItem", "assemblyExpression", "assemblyCall", 
                   "assemblyLocalDefinition", "assemblyAssignment", "assemblyIdentifierOrList", 
                   "assemblyIdentifierList", "assemblyRightAssignment", 
                   "labelDefinition", "assemblySwitch", "assemblyCase", 
                   "assemblyFunctionDefinition", "assemblyFor", "assemblyLiteral", 
                   "subAssembly", "dataSize", "linkerSymbol", "tupleExpression", 
                   "elementaryTypeNameExpression", "numberLiteral", "identifier" ];

function SolidityParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

SolidityParser.prototype = Object.create(antlr4.Parser.prototype);
SolidityParser.prototype.constructor = SolidityParser;

Object.defineProperty(SolidityParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

SolidityParser.EOF = antlr4.Token.EOF;
SolidityParser.T__0 = 1;
SolidityParser.T__1 = 2;
SolidityParser.T__2 = 3;
SolidityParser.T__3 = 4;
SolidityParser.T__4 = 5;
SolidityParser.T__5 = 6;
SolidityParser.T__6 = 7;
SolidityParser.T__7 = 8;
SolidityParser.T__8 = 9;
SolidityParser.T__9 = 10;
SolidityParser.T__10 = 11;
SolidityParser.T__11 = 12;
SolidityParser.T__12 = 13;
SolidityParser.T__13 = 14;
SolidityParser.T__14 = 15;
SolidityParser.T__15 = 16;
SolidityParser.T__16 = 17;
SolidityParser.T__17 = 18;
SolidityParser.T__18 = 19;
SolidityParser.T__19 = 20;
SolidityParser.T__20 = 21;
SolidityParser.T__21 = 22;
SolidityParser.T__22 = 23;
SolidityParser.T__23 = 24;
SolidityParser.T__24 = 25;
SolidityParser.T__25 = 26;
SolidityParser.T__26 = 27;
SolidityParser.T__27 = 28;
SolidityParser.T__28 = 29;
SolidityParser.T__29 = 30;
SolidityParser.T__30 = 31;
SolidityParser.T__31 = 32;
SolidityParser.T__32 = 33;
SolidityParser.T__33 = 34;
SolidityParser.T__34 = 35;
SolidityParser.T__35 = 36;
SolidityParser.T__36 = 37;
SolidityParser.T__37 = 38;
SolidityParser.T__38 = 39;
SolidityParser.T__39 = 40;
SolidityParser.T__40 = 41;
SolidityParser.T__41 = 42;
SolidityParser.T__42 = 43;
SolidityParser.T__43 = 44;
SolidityParser.T__44 = 45;
SolidityParser.T__45 = 46;
SolidityParser.T__46 = 47;
SolidityParser.T__47 = 48;
SolidityParser.T__48 = 49;
SolidityParser.T__49 = 50;
SolidityParser.T__50 = 51;
SolidityParser.T__51 = 52;
SolidityParser.T__52 = 53;
SolidityParser.T__53 = 54;
SolidityParser.T__54 = 55;
SolidityParser.T__55 = 56;
SolidityParser.T__56 = 57;
SolidityParser.T__57 = 58;
SolidityParser.T__58 = 59;
SolidityParser.T__59 = 60;
SolidityParser.T__60 = 61;
SolidityParser.T__61 = 62;
SolidityParser.T__62 = 63;
SolidityParser.T__63 = 64;
SolidityParser.T__64 = 65;
SolidityParser.T__65 = 66;
SolidityParser.T__66 = 67;
SolidityParser.T__67 = 68;
SolidityParser.T__68 = 69;
SolidityParser.T__69 = 70;
SolidityParser.T__70 = 71;
SolidityParser.T__71 = 72;
SolidityParser.T__72 = 73;
SolidityParser.T__73 = 74;
SolidityParser.T__74 = 75;
SolidityParser.T__75 = 76;
SolidityParser.T__76 = 77;
SolidityParser.T__77 = 78;
SolidityParser.T__78 = 79;
SolidityParser.T__79 = 80;
SolidityParser.T__80 = 81;
SolidityParser.T__81 = 82;
SolidityParser.T__82 = 83;
SolidityParser.T__83 = 84;
SolidityParser.T__84 = 85;
SolidityParser.T__85 = 86;
SolidityParser.T__86 = 87;
SolidityParser.T__87 = 88;
SolidityParser.T__88 = 89;
SolidityParser.T__89 = 90;
SolidityParser.T__90 = 91;
SolidityParser.T__91 = 92;
SolidityParser.T__92 = 93;
SolidityParser.Int = 94;
SolidityParser.Uint = 95;
SolidityParser.Byte = 96;
SolidityParser.Fixed = 97;
SolidityParser.Ufixed = 98;
SolidityParser.VersionLiteral = 99;
SolidityParser.BooleanLiteral = 100;
SolidityParser.DecimalNumber = 101;
SolidityParser.HexNumber = 102;
SolidityParser.NumberUnit = 103;
SolidityParser.HexLiteral = 104;
SolidityParser.ReservedKeyword = 105;
SolidityParser.AnonymousKeyword = 106;
SolidityParser.ConstantKeyword = 107;
SolidityParser.ExternalKeyword = 108;
SolidityParser.IndexedKeyword = 109;
SolidityParser.InternalKeyword = 110;
SolidityParser.PayableKeyword = 111;
SolidityParser.PrivateKeyword = 112;
SolidityParser.PublicKeyword = 113;
SolidityParser.PureKeyword = 114;
SolidityParser.ViewKeyword = 115;
SolidityParser.Identifier = 116;
SolidityParser.StringLiteral = 117;
SolidityParser.WS = 118;
SolidityParser.COMMENT = 119;
SolidityParser.LINE_COMMENT = 120;

SolidityParser.RULE_sourceUnit = 0;
SolidityParser.RULE_pragmaDirective = 1;
SolidityParser.RULE_pragmaName = 2;
SolidityParser.RULE_pragmaValue = 3;
SolidityParser.RULE_version = 4;
SolidityParser.RULE_versionOperator = 5;
SolidityParser.RULE_versionConstraint = 6;
SolidityParser.RULE_importDeclaration = 7;
SolidityParser.RULE_importDirective = 8;
SolidityParser.RULE_contractDefinition = 9;
SolidityParser.RULE_inheritanceSpecifier = 10;
SolidityParser.RULE_contractPart = 11;
SolidityParser.RULE_stateVariableDeclaration = 12;
SolidityParser.RULE_usingForDeclaration = 13;
SolidityParser.RULE_structDefinition = 14;
SolidityParser.RULE_modifierDefinition = 15;
SolidityParser.RULE_modifierInvocation = 16;
SolidityParser.RULE_functionDefinition = 17;
SolidityParser.RULE_returnParameters = 18;
SolidityParser.RULE_modifierList = 19;
SolidityParser.RULE_eventDefinition = 20;
SolidityParser.RULE_enumValue = 21;
SolidityParser.RULE_enumDefinition = 22;
SolidityParser.RULE_indexedParameterList = 23;
SolidityParser.RULE_indexedParameter = 24;
SolidityParser.RULE_parameterList = 25;
SolidityParser.RULE_parameter = 26;
SolidityParser.RULE_typeNameList = 27;
SolidityParser.RULE_unnamedParameter = 28;
SolidityParser.RULE_variableDeclaration = 29;
SolidityParser.RULE_typeName = 30;
SolidityParser.RULE_userDefinedTypeName = 31;
SolidityParser.RULE_mapping = 32;
SolidityParser.RULE_functionTypeName = 33;
SolidityParser.RULE_storageLocation = 34;
SolidityParser.RULE_stateMutability = 35;
SolidityParser.RULE_block = 36;
SolidityParser.RULE_statement = 37;
SolidityParser.RULE_expressionStatement = 38;
SolidityParser.RULE_ifStatement = 39;
SolidityParser.RULE_whileStatement = 40;
SolidityParser.RULE_simpleStatement = 41;
SolidityParser.RULE_forStatement = 42;
SolidityParser.RULE_inlineAssemblyStatement = 43;
SolidityParser.RULE_doWhileStatement = 44;
SolidityParser.RULE_continueStatement = 45;
SolidityParser.RULE_breakStatement = 46;
SolidityParser.RULE_returnStatement = 47;
SolidityParser.RULE_throwStatement = 48;
SolidityParser.RULE_variableDeclarationStatement = 49;
SolidityParser.RULE_identifierList = 50;
SolidityParser.RULE_elementaryTypeName = 51;
SolidityParser.RULE_expression = 52;
SolidityParser.RULE_primaryExpression = 53;
SolidityParser.RULE_expressionList = 54;
SolidityParser.RULE_nameValueList = 55;
SolidityParser.RULE_nameValue = 56;
SolidityParser.RULE_functionCallArguments = 57;
SolidityParser.RULE_assemblyBlock = 58;
SolidityParser.RULE_assemblyItem = 59;
SolidityParser.RULE_assemblyExpression = 60;
SolidityParser.RULE_assemblyCall = 61;
SolidityParser.RULE_assemblyLocalDefinition = 62;
SolidityParser.RULE_assemblyAssignment = 63;
SolidityParser.RULE_assemblyIdentifierOrList = 64;
SolidityParser.RULE_assemblyIdentifierList = 65;
SolidityParser.RULE_assemblyRightAssignment = 66;
SolidityParser.RULE_labelDefinition = 67;
SolidityParser.RULE_assemblySwitch = 68;
SolidityParser.RULE_assemblyCase = 69;
SolidityParser.RULE_assemblyFunctionDefinition = 70;
SolidityParser.RULE_assemblyFor = 71;
SolidityParser.RULE_assemblyLiteral = 72;
SolidityParser.RULE_subAssembly = 73;
SolidityParser.RULE_dataSize = 74;
SolidityParser.RULE_linkerSymbol = 75;
SolidityParser.RULE_tupleExpression = 76;
SolidityParser.RULE_elementaryTypeNameExpression = 77;
SolidityParser.RULE_numberLiteral = 78;
SolidityParser.RULE_identifier = 79;

function SourceUnitContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_sourceUnit;
    return this;
}

SourceUnitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceUnitContext.prototype.constructor = SourceUnitContext;

SourceUnitContext.prototype.EOF = function() {
    return this.getToken(SolidityParser.EOF, 0);
};

SourceUnitContext.prototype.pragmaDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PragmaDirectiveContext);
    } else {
        return this.getTypedRuleContext(PragmaDirectiveContext,i);
    }
};

SourceUnitContext.prototype.importDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDirectiveContext);
    } else {
        return this.getTypedRuleContext(ImportDirectiveContext,i);
    }
};

SourceUnitContext.prototype.contractDefinition = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ContractDefinitionContext);
    } else {
        return this.getTypedRuleContext(ContractDefinitionContext,i);
    }
};

SourceUnitContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterSourceUnit(this);
	}
};

SourceUnitContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitSourceUnit(this);
	}
};




SolidityParser.SourceUnitContext = SourceUnitContext;

SolidityParser.prototype.sourceUnit = function() {

    var localctx = new SourceUnitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, SolidityParser.RULE_sourceUnit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 165;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__0) | (1 << SolidityParser.T__8) | (1 << SolidityParser.T__14) | (1 << SolidityParser.T__15) | (1 << SolidityParser.T__16))) !== 0)) {
            this.state = 163;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SolidityParser.T__0:
                this.state = 160;
                this.pragmaDirective();
                break;
            case SolidityParser.T__8:
                this.state = 161;
                this.importDirective();
                break;
            case SolidityParser.T__14:
            case SolidityParser.T__15:
            case SolidityParser.T__16:
                this.state = 162;
                this.contractDefinition();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 167;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 168;
        this.match(SolidityParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaDirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaDirective;
    return this;
}

PragmaDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaDirectiveContext.prototype.constructor = PragmaDirectiveContext;

PragmaDirectiveContext.prototype.pragmaName = function() {
    return this.getTypedRuleContext(PragmaNameContext,0);
};

PragmaDirectiveContext.prototype.pragmaValue = function() {
    return this.getTypedRuleContext(PragmaValueContext,0);
};

PragmaDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPragmaDirective(this);
	}
};

PragmaDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPragmaDirective(this);
	}
};




SolidityParser.PragmaDirectiveContext = PragmaDirectiveContext;

SolidityParser.prototype.pragmaDirective = function() {

    var localctx = new PragmaDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, SolidityParser.RULE_pragmaDirective);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 170;
        this.match(SolidityParser.T__0);
        this.state = 171;
        this.pragmaName();
        this.state = 172;
        this.pragmaValue();
        this.state = 173;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaName;
    return this;
}

PragmaNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaNameContext.prototype.constructor = PragmaNameContext;

PragmaNameContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PragmaNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPragmaName(this);
	}
};

PragmaNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPragmaName(this);
	}
};




SolidityParser.PragmaNameContext = PragmaNameContext;

SolidityParser.prototype.pragmaName = function() {

    var localctx = new PragmaNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, SolidityParser.RULE_pragmaName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 175;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PragmaValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_pragmaValue;
    return this;
}

PragmaValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PragmaValueContext.prototype.constructor = PragmaValueContext;

PragmaValueContext.prototype.version = function() {
    return this.getTypedRuleContext(VersionContext,0);
};

PragmaValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

PragmaValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPragmaValue(this);
	}
};

PragmaValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPragmaValue(this);
	}
};




SolidityParser.PragmaValueContext = PragmaValueContext;

SolidityParser.prototype.pragmaValue = function() {

    var localctx = new PragmaValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, SolidityParser.RULE_pragmaValue);
    try {
        this.state = 179;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__2:
        case SolidityParser.T__3:
        case SolidityParser.T__4:
        case SolidityParser.T__5:
        case SolidityParser.T__6:
        case SolidityParser.VersionLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 177;
            this.version();
            break;
        case SolidityParser.T__10:
        case SolidityParser.T__18:
        case SolidityParser.T__29:
        case SolidityParser.T__45:
        case SolidityParser.T__46:
        case SolidityParser.T__47:
        case SolidityParser.T__48:
        case SolidityParser.T__49:
        case SolidityParser.T__50:
        case SolidityParser.T__51:
        case SolidityParser.T__52:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.Identifier:
        case SolidityParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 178;
            this.expression(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_version;
    return this;
}

VersionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionContext.prototype.constructor = VersionContext;

VersionContext.prototype.versionConstraint = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VersionConstraintContext);
    } else {
        return this.getTypedRuleContext(VersionConstraintContext,i);
    }
};

VersionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVersion(this);
	}
};

VersionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVersion(this);
	}
};




SolidityParser.VersionContext = VersionContext;

SolidityParser.prototype.version = function() {

    var localctx = new VersionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, SolidityParser.RULE_version);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 181;
        this.versionConstraint();
        this.state = 183;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0) || _la===SolidityParser.VersionLiteral) {
            this.state = 182;
            this.versionConstraint();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_versionOperator;
    return this;
}

VersionOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionOperatorContext.prototype.constructor = VersionOperatorContext;


VersionOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVersionOperator(this);
	}
};

VersionOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVersionOperator(this);
	}
};




SolidityParser.VersionOperatorContext = VersionOperatorContext;

SolidityParser.prototype.versionOperator = function() {

    var localctx = new VersionOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, SolidityParser.RULE_versionOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 185;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VersionConstraintContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_versionConstraint;
    return this;
}

VersionConstraintContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VersionConstraintContext.prototype.constructor = VersionConstraintContext;

VersionConstraintContext.prototype.VersionLiteral = function() {
    return this.getToken(SolidityParser.VersionLiteral, 0);
};

VersionConstraintContext.prototype.versionOperator = function() {
    return this.getTypedRuleContext(VersionOperatorContext,0);
};

VersionConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVersionConstraint(this);
	}
};

VersionConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVersionConstraint(this);
	}
};




SolidityParser.VersionConstraintContext = VersionConstraintContext;

SolidityParser.prototype.versionConstraint = function() {

    var localctx = new VersionConstraintContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, SolidityParser.RULE_versionConstraint);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 188;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__2) | (1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0)) {
            this.state = 187;
            this.versionOperator();
        }

        this.state = 190;
        this.match(SolidityParser.VersionLiteral);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_importDeclaration;
    return this;
}

ImportDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDeclarationContext.prototype.constructor = ImportDeclarationContext;

ImportDeclarationContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ImportDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterImportDeclaration(this);
	}
};

ImportDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitImportDeclaration(this);
	}
};




SolidityParser.ImportDeclarationContext = ImportDeclarationContext;

SolidityParser.prototype.importDeclaration = function() {

    var localctx = new ImportDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, SolidityParser.RULE_importDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 192;
        this.identifier();
        this.state = 195;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__7) {
            this.state = 193;
            this.match(SolidityParser.T__7);
            this.state = 194;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ImportDirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_importDirective;
    return this;
}

ImportDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ImportDirectiveContext.prototype.constructor = ImportDirectiveContext;

ImportDirectiveContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

ImportDirectiveContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ImportDirectiveContext.prototype.importDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ImportDeclarationContext);
    } else {
        return this.getTypedRuleContext(ImportDeclarationContext,i);
    }
};

ImportDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterImportDirective(this);
	}
};

ImportDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitImportDirective(this);
	}
};




SolidityParser.ImportDirectiveContext = ImportDirectiveContext;

SolidityParser.prototype.importDirective = function() {

    var localctx = new ImportDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, SolidityParser.RULE_importDirective);
    var _la = 0; // Token type
    try {
        this.state = 231;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 197;
            this.match(SolidityParser.T__8);
            this.state = 198;
            this.match(SolidityParser.StringLiteral);
            this.state = 201;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__7) {
                this.state = 199;
                this.match(SolidityParser.T__7);
                this.state = 200;
                this.identifier();
            }

            this.state = 203;
            this.match(SolidityParser.T__1);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 204;
            this.match(SolidityParser.T__8);
            this.state = 207;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SolidityParser.T__9:
                this.state = 205;
                this.match(SolidityParser.T__9);
                break;
            case SolidityParser.T__10:
            case SolidityParser.Identifier:
                this.state = 206;
                this.identifier();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 211;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__7) {
                this.state = 209;
                this.match(SolidityParser.T__7);
                this.state = 210;
                this.identifier();
            }

            this.state = 213;
            this.match(SolidityParser.T__10);
            this.state = 214;
            this.match(SolidityParser.StringLiteral);
            this.state = 215;
            this.match(SolidityParser.T__1);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 216;
            this.match(SolidityParser.T__8);
            this.state = 217;
            this.match(SolidityParser.T__11);
            this.state = 218;
            this.importDeclaration();
            this.state = 223;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 219;
                this.match(SolidityParser.T__12);
                this.state = 220;
                this.importDeclaration();
                this.state = 225;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 226;
            this.match(SolidityParser.T__13);
            this.state = 227;
            this.match(SolidityParser.T__10);
            this.state = 228;
            this.match(SolidityParser.StringLiteral);
            this.state = 229;
            this.match(SolidityParser.T__1);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContractDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_contractDefinition;
    return this;
}

ContractDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractDefinitionContext.prototype.constructor = ContractDefinitionContext;

ContractDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ContractDefinitionContext.prototype.inheritanceSpecifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InheritanceSpecifierContext);
    } else {
        return this.getTypedRuleContext(InheritanceSpecifierContext,i);
    }
};

ContractDefinitionContext.prototype.contractPart = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ContractPartContext);
    } else {
        return this.getTypedRuleContext(ContractPartContext,i);
    }
};

ContractDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterContractDefinition(this);
	}
};

ContractDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitContractDefinition(this);
	}
};




SolidityParser.ContractDefinitionContext = ContractDefinitionContext;

SolidityParser.prototype.contractDefinition = function() {

    var localctx = new ContractDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, SolidityParser.RULE_contractDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 233;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__14) | (1 << SolidityParser.T__15) | (1 << SolidityParser.T__16))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 234;
        this.identifier();
        this.state = 244;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__17) {
            this.state = 235;
            this.match(SolidityParser.T__17);
            this.state = 236;
            this.inheritanceSpecifier();
            this.state = 241;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 237;
                this.match(SolidityParser.T__12);
                this.state = 238;
                this.inheritanceSpecifier();
                this.state = 243;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 246;
        this.match(SolidityParser.T__11);
        this.state = 250;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__21) | (1 << SolidityParser.T__23) | (1 << SolidityParser.T__24) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__27) | (1 << SolidityParser.T__28))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__45 - 33)) | (1 << (SolidityParser.T__46 - 33)) | (1 << (SolidityParser.T__47 - 33)) | (1 << (SolidityParser.T__48 - 33)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.Identifier - 94)))) !== 0)) {
            this.state = 247;
            this.contractPart();
            this.state = 252;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 253;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InheritanceSpecifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inheritanceSpecifier;
    return this;
}

InheritanceSpecifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InheritanceSpecifierContext.prototype.constructor = InheritanceSpecifierContext;

InheritanceSpecifierContext.prototype.userDefinedTypeName = function() {
    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
};

InheritanceSpecifierContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

InheritanceSpecifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterInheritanceSpecifier(this);
	}
};

InheritanceSpecifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitInheritanceSpecifier(this);
	}
};




SolidityParser.InheritanceSpecifierContext = InheritanceSpecifierContext;

SolidityParser.prototype.inheritanceSpecifier = function() {

    var localctx = new InheritanceSpecifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, SolidityParser.RULE_inheritanceSpecifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 255;
        this.userDefinedTypeName();
        this.state = 267;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18) {
            this.state = 256;
            this.match(SolidityParser.T__18);
            this.state = 257;
            this.expression(0);
            this.state = 262;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 258;
                this.match(SolidityParser.T__12);
                this.state = 259;
                this.expression(0);
                this.state = 264;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 265;
            this.match(SolidityParser.T__19);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContractPartContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_contractPart;
    return this;
}

ContractPartContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContractPartContext.prototype.constructor = ContractPartContext;

ContractPartContext.prototype.stateVariableDeclaration = function() {
    return this.getTypedRuleContext(StateVariableDeclarationContext,0);
};

ContractPartContext.prototype.usingForDeclaration = function() {
    return this.getTypedRuleContext(UsingForDeclarationContext,0);
};

ContractPartContext.prototype.structDefinition = function() {
    return this.getTypedRuleContext(StructDefinitionContext,0);
};

ContractPartContext.prototype.modifierDefinition = function() {
    return this.getTypedRuleContext(ModifierDefinitionContext,0);
};

ContractPartContext.prototype.functionDefinition = function() {
    return this.getTypedRuleContext(FunctionDefinitionContext,0);
};

ContractPartContext.prototype.eventDefinition = function() {
    return this.getTypedRuleContext(EventDefinitionContext,0);
};

ContractPartContext.prototype.enumDefinition = function() {
    return this.getTypedRuleContext(EnumDefinitionContext,0);
};

ContractPartContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterContractPart(this);
	}
};

ContractPartContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitContractPart(this);
	}
};




SolidityParser.ContractPartContext = ContractPartContext;

SolidityParser.prototype.contractPart = function() {

    var localctx = new ContractPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, SolidityParser.RULE_contractPart);
    try {
        this.state = 276;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 269;
            this.stateVariableDeclaration();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 270;
            this.usingForDeclaration();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 271;
            this.structDefinition();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 272;
            this.modifierDefinition();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 273;
            this.functionDefinition();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 274;
            this.eventDefinition();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 275;
            this.enumDefinition();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StateVariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_stateVariableDeclaration;
    return this;
}

StateVariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateVariableDeclarationContext.prototype.constructor = StateVariableDeclarationContext;

StateVariableDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

StateVariableDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StateVariableDeclarationContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

StateVariableDeclarationContext.prototype.PublicKeyword = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.PublicKeyword);
    } else {
        return this.getToken(SolidityParser.PublicKeyword, i);
    }
};


StateVariableDeclarationContext.prototype.InternalKeyword = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.InternalKeyword);
    } else {
        return this.getToken(SolidityParser.InternalKeyword, i);
    }
};


StateVariableDeclarationContext.prototype.PrivateKeyword = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.PrivateKeyword);
    } else {
        return this.getToken(SolidityParser.PrivateKeyword, i);
    }
};


StateVariableDeclarationContext.prototype.ConstantKeyword = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.ConstantKeyword);
    } else {
        return this.getToken(SolidityParser.ConstantKeyword, i);
    }
};


StateVariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStateVariableDeclaration(this);
	}
};

StateVariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStateVariableDeclaration(this);
	}
};




SolidityParser.StateVariableDeclarationContext = StateVariableDeclarationContext;

SolidityParser.prototype.stateVariableDeclaration = function() {

    var localctx = new StateVariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, SolidityParser.RULE_stateVariableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 278;
        this.typeName(0);
        this.state = 282;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (SolidityParser.ConstantKeyword - 107)) | (1 << (SolidityParser.InternalKeyword - 107)) | (1 << (SolidityParser.PrivateKeyword - 107)) | (1 << (SolidityParser.PublicKeyword - 107)))) !== 0)) {
            this.state = 279;
            _la = this._input.LA(1);
            if(!(((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (SolidityParser.ConstantKeyword - 107)) | (1 << (SolidityParser.InternalKeyword - 107)) | (1 << (SolidityParser.PrivateKeyword - 107)) | (1 << (SolidityParser.PublicKeyword - 107)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 284;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 285;
        this.identifier();
        this.state = 288;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__20) {
            this.state = 286;
            this.match(SolidityParser.T__20);
            this.state = 287;
            this.expression(0);
        }

        this.state = 290;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UsingForDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_usingForDeclaration;
    return this;
}

UsingForDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UsingForDeclarationContext.prototype.constructor = UsingForDeclarationContext;

UsingForDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

UsingForDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

UsingForDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterUsingForDeclaration(this);
	}
};

UsingForDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitUsingForDeclaration(this);
	}
};




SolidityParser.UsingForDeclarationContext = UsingForDeclarationContext;

SolidityParser.prototype.usingForDeclaration = function() {

    var localctx = new UsingForDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, SolidityParser.RULE_usingForDeclaration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 292;
        this.match(SolidityParser.T__21);
        this.state = 293;
        this.identifier();
        this.state = 294;
        this.match(SolidityParser.T__22);
        this.state = 297;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__9:
            this.state = 295;
            this.match(SolidityParser.T__9);
            break;
        case SolidityParser.T__10:
        case SolidityParser.T__25:
        case SolidityParser.T__32:
        case SolidityParser.T__45:
        case SolidityParser.T__46:
        case SolidityParser.T__47:
        case SolidityParser.T__48:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.Identifier:
            this.state = 296;
            this.typeName(0);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 299;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StructDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_structDefinition;
    return this;
}

StructDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StructDefinitionContext.prototype.constructor = StructDefinitionContext;

StructDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

StructDefinitionContext.prototype.variableDeclaration = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(VariableDeclarationContext);
    } else {
        return this.getTypedRuleContext(VariableDeclarationContext,i);
    }
};

StructDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStructDefinition(this);
	}
};

StructDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStructDefinition(this);
	}
};




SolidityParser.StructDefinitionContext = StructDefinitionContext;

SolidityParser.prototype.structDefinition = function() {

    var localctx = new StructDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, SolidityParser.RULE_structDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 301;
        this.match(SolidityParser.T__23);
        this.state = 302;
        this.identifier();
        this.state = 303;
        this.match(SolidityParser.T__11);
        this.state = 314;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.T__25 || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__45 - 33)) | (1 << (SolidityParser.T__46 - 33)) | (1 << (SolidityParser.T__47 - 33)) | (1 << (SolidityParser.T__48 - 33)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.Identifier - 94)))) !== 0)) {
            this.state = 304;
            this.variableDeclaration();
            this.state = 305;
            this.match(SolidityParser.T__1);
            this.state = 311;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__10 || _la===SolidityParser.T__25 || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__45 - 33)) | (1 << (SolidityParser.T__46 - 33)) | (1 << (SolidityParser.T__47 - 33)) | (1 << (SolidityParser.T__48 - 33)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.Identifier - 94)))) !== 0)) {
                this.state = 306;
                this.variableDeclaration();
                this.state = 307;
                this.match(SolidityParser.T__1);
                this.state = 313;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 316;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierDefinition;
    return this;
}

ModifierDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierDefinitionContext.prototype.constructor = ModifierDefinitionContext;

ModifierDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ModifierDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

ModifierDefinitionContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ModifierDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterModifierDefinition(this);
	}
};

ModifierDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitModifierDefinition(this);
	}
};




SolidityParser.ModifierDefinitionContext = ModifierDefinitionContext;

SolidityParser.prototype.modifierDefinition = function() {

    var localctx = new ModifierDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, SolidityParser.RULE_modifierDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 318;
        this.match(SolidityParser.T__24);
        this.state = 319;
        this.identifier();
        this.state = 321;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18) {
            this.state = 320;
            this.parameterList();
        }

        this.state = 323;
        this.block();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierInvocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierInvocation;
    return this;
}

ModifierInvocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierInvocationContext.prototype.constructor = ModifierInvocationContext;

ModifierInvocationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ModifierInvocationContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

ModifierInvocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterModifierInvocation(this);
	}
};

ModifierInvocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitModifierInvocation(this);
	}
};




SolidityParser.ModifierInvocationContext = ModifierInvocationContext;

SolidityParser.prototype.modifierInvocation = function() {

    var localctx = new ModifierInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, SolidityParser.RULE_modifierInvocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 325;
        this.identifier();
        this.state = 331;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__18) {
            this.state = 326;
            this.match(SolidityParser.T__18);
            this.state = 328;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__29))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (SolidityParser.T__45 - 46)) | (1 << (SolidityParser.T__46 - 46)) | (1 << (SolidityParser.T__47 - 46)) | (1 << (SolidityParser.T__48 - 46)) | (1 << (SolidityParser.T__49 - 46)) | (1 << (SolidityParser.T__50 - 46)) | (1 << (SolidityParser.T__51 - 46)) | (1 << (SolidityParser.T__52 - 46)) | (1 << (SolidityParser.T__53 - 46)) | (1 << (SolidityParser.T__54 - 46)) | (1 << (SolidityParser.T__55 - 46)) | (1 << (SolidityParser.T__56 - 46)) | (1 << (SolidityParser.T__57 - 46)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.BooleanLiteral - 94)) | (1 << (SolidityParser.DecimalNumber - 94)) | (1 << (SolidityParser.HexNumber - 94)) | (1 << (SolidityParser.HexLiteral - 94)) | (1 << (SolidityParser.Identifier - 94)) | (1 << (SolidityParser.StringLiteral - 94)))) !== 0)) {
                this.state = 327;
                this.expressionList();
            }

            this.state = 330;
            this.match(SolidityParser.T__19);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionDefinition;
    return this;
}

FunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionDefinitionContext.prototype.constructor = FunctionDefinitionContext;

FunctionDefinitionContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

FunctionDefinitionContext.prototype.modifierList = function() {
    return this.getTypedRuleContext(ModifierListContext,0);
};

FunctionDefinitionContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

FunctionDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

FunctionDefinitionContext.prototype.returnParameters = function() {
    return this.getTypedRuleContext(ReturnParametersContext,0);
};

FunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterFunctionDefinition(this);
	}
};

FunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitFunctionDefinition(this);
	}
};




SolidityParser.FunctionDefinitionContext = FunctionDefinitionContext;

SolidityParser.prototype.functionDefinition = function() {

    var localctx = new FunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, SolidityParser.RULE_functionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 333;
        this.match(SolidityParser.T__25);
        this.state = 335;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
            this.state = 334;
            this.identifier();
        }

        this.state = 337;
        this.parameterList();
        this.state = 338;
        this.modifierList();
        this.state = 340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__26) {
            this.state = 339;
            this.returnParameters();
        }

        this.state = 344;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__1:
            this.state = 342;
            this.match(SolidityParser.T__1);
            break;
        case SolidityParser.T__11:
            this.state = 343;
            this.block();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnParametersContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_returnParameters;
    return this;
}

ReturnParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnParametersContext.prototype.constructor = ReturnParametersContext;

ReturnParametersContext.prototype.parameterList = function() {
    return this.getTypedRuleContext(ParameterListContext,0);
};

ReturnParametersContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterReturnParameters(this);
	}
};

ReturnParametersContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitReturnParameters(this);
	}
};




SolidityParser.ReturnParametersContext = ReturnParametersContext;

SolidityParser.prototype.returnParameters = function() {

    var localctx = new ReturnParametersContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, SolidityParser.RULE_returnParameters);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 346;
        this.match(SolidityParser.T__26);
        this.state = 347;
        this.parameterList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ModifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_modifierList;
    return this;
}

ModifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ModifierListContext.prototype.constructor = ModifierListContext;

ModifierListContext.prototype.modifierInvocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ModifierInvocationContext);
    } else {
        return this.getTypedRuleContext(ModifierInvocationContext,i);
    }
};

ModifierListContext.prototype.stateMutability = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StateMutabilityContext);
    } else {
        return this.getTypedRuleContext(StateMutabilityContext,i);
    }
};

ModifierListContext.prototype.ExternalKeyword = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.ExternalKeyword);
    } else {
        return this.getToken(SolidityParser.ExternalKeyword, i);
    }
};


ModifierListContext.prototype.PublicKeyword = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.PublicKeyword);
    } else {
        return this.getToken(SolidityParser.PublicKeyword, i);
    }
};


ModifierListContext.prototype.InternalKeyword = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.InternalKeyword);
    } else {
        return this.getToken(SolidityParser.InternalKeyword, i);
    }
};


ModifierListContext.prototype.PrivateKeyword = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.PrivateKeyword);
    } else {
        return this.getToken(SolidityParser.PrivateKeyword, i);
    }
};


ModifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterModifierList(this);
	}
};

ModifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitModifierList(this);
	}
};




SolidityParser.ModifierListContext = ModifierListContext;

SolidityParser.prototype.modifierList = function() {

    var localctx = new ModifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, SolidityParser.RULE_modifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 357;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__10 || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (SolidityParser.ConstantKeyword - 107)) | (1 << (SolidityParser.ExternalKeyword - 107)) | (1 << (SolidityParser.InternalKeyword - 107)) | (1 << (SolidityParser.PayableKeyword - 107)) | (1 << (SolidityParser.PrivateKeyword - 107)) | (1 << (SolidityParser.PublicKeyword - 107)) | (1 << (SolidityParser.PureKeyword - 107)) | (1 << (SolidityParser.ViewKeyword - 107)) | (1 << (SolidityParser.Identifier - 107)))) !== 0)) {
            this.state = 355;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SolidityParser.T__10:
            case SolidityParser.Identifier:
                this.state = 349;
                this.modifierInvocation();
                break;
            case SolidityParser.ConstantKeyword:
            case SolidityParser.PayableKeyword:
            case SolidityParser.PureKeyword:
            case SolidityParser.ViewKeyword:
                this.state = 350;
                this.stateMutability();
                break;
            case SolidityParser.ExternalKeyword:
                this.state = 351;
                this.match(SolidityParser.ExternalKeyword);
                break;
            case SolidityParser.PublicKeyword:
                this.state = 352;
                this.match(SolidityParser.PublicKeyword);
                break;
            case SolidityParser.InternalKeyword:
                this.state = 353;
                this.match(SolidityParser.InternalKeyword);
                break;
            case SolidityParser.PrivateKeyword:
                this.state = 354;
                this.match(SolidityParser.PrivateKeyword);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 359;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EventDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_eventDefinition;
    return this;
}

EventDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EventDefinitionContext.prototype.constructor = EventDefinitionContext;

EventDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

EventDefinitionContext.prototype.indexedParameterList = function() {
    return this.getTypedRuleContext(IndexedParameterListContext,0);
};

EventDefinitionContext.prototype.AnonymousKeyword = function() {
    return this.getToken(SolidityParser.AnonymousKeyword, 0);
};

EventDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterEventDefinition(this);
	}
};

EventDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitEventDefinition(this);
	}
};




SolidityParser.EventDefinitionContext = EventDefinitionContext;

SolidityParser.prototype.eventDefinition = function() {

    var localctx = new EventDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, SolidityParser.RULE_eventDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 360;
        this.match(SolidityParser.T__27);
        this.state = 361;
        this.identifier();
        this.state = 362;
        this.indexedParameterList();
        this.state = 364;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.AnonymousKeyword) {
            this.state = 363;
            this.match(SolidityParser.AnonymousKeyword);
        }

        this.state = 366;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_enumValue;
    return this;
}

EnumValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumValueContext.prototype.constructor = EnumValueContext;

EnumValueContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

EnumValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterEnumValue(this);
	}
};

EnumValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitEnumValue(this);
	}
};




SolidityParser.EnumValueContext = EnumValueContext;

SolidityParser.prototype.enumValue = function() {

    var localctx = new EnumValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, SolidityParser.RULE_enumValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 368;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_enumDefinition;
    return this;
}

EnumDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumDefinitionContext.prototype.constructor = EnumDefinitionContext;

EnumDefinitionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

EnumDefinitionContext.prototype.enumValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumValueContext);
    } else {
        return this.getTypedRuleContext(EnumValueContext,i);
    }
};

EnumDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterEnumDefinition(this);
	}
};

EnumDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitEnumDefinition(this);
	}
};




SolidityParser.EnumDefinitionContext = EnumDefinitionContext;

SolidityParser.prototype.enumDefinition = function() {

    var localctx = new EnumDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, SolidityParser.RULE_enumDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 370;
        this.match(SolidityParser.T__28);
        this.state = 371;
        this.identifier();
        this.state = 372;
        this.match(SolidityParser.T__11);
        this.state = 374;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
            this.state = 373;
            this.enumValue();
        }

        this.state = 380;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__12) {
            this.state = 376;
            this.match(SolidityParser.T__12);
            this.state = 377;
            this.enumValue();
            this.state = 382;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 383;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexedParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_indexedParameterList;
    return this;
}

IndexedParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexedParameterListContext.prototype.constructor = IndexedParameterListContext;

IndexedParameterListContext.prototype.indexedParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IndexedParameterContext);
    } else {
        return this.getTypedRuleContext(IndexedParameterContext,i);
    }
};

IndexedParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIndexedParameterList(this);
	}
};

IndexedParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIndexedParameterList(this);
	}
};




SolidityParser.IndexedParameterListContext = IndexedParameterListContext;

SolidityParser.prototype.indexedParameterList = function() {

    var localctx = new IndexedParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, SolidityParser.RULE_indexedParameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 385;
        this.match(SolidityParser.T__18);
        this.state = 394;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.T__25 || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__45 - 33)) | (1 << (SolidityParser.T__46 - 33)) | (1 << (SolidityParser.T__47 - 33)) | (1 << (SolidityParser.T__48 - 33)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.Identifier - 94)))) !== 0)) {
            this.state = 386;
            this.indexedParameter();
            this.state = 391;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 387;
                this.match(SolidityParser.T__12);
                this.state = 388;
                this.indexedParameter();
                this.state = 393;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 396;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IndexedParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_indexedParameter;
    return this;
}

IndexedParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IndexedParameterContext.prototype.constructor = IndexedParameterContext;

IndexedParameterContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

IndexedParameterContext.prototype.storageLocation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StorageLocationContext);
    } else {
        return this.getTypedRuleContext(StorageLocationContext,i);
    }
};

IndexedParameterContext.prototype.IndexedKeyword = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.IndexedKeyword);
    } else {
        return this.getToken(SolidityParser.IndexedKeyword, i);
    }
};


IndexedParameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IndexedParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIndexedParameter(this);
	}
};

IndexedParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIndexedParameter(this);
	}
};




SolidityParser.IndexedParameterContext = IndexedParameterContext;

SolidityParser.prototype.indexedParameter = function() {

    var localctx = new IndexedParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, SolidityParser.RULE_indexedParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 398;
        this.typeName(0);
        this.state = 403;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__34 || _la===SolidityParser.T__35 || _la===SolidityParser.IndexedKeyword) {
            this.state = 401;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case SolidityParser.T__34:
            case SolidityParser.T__35:
                this.state = 399;
                this.storageLocation();
                break;
            case SolidityParser.IndexedKeyword:
                this.state = 400;
                this.match(SolidityParser.IndexedKeyword);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 405;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 407;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
            this.state = 406;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_parameterList;
    return this;
}

ParameterListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterListContext.prototype.constructor = ParameterListContext;

ParameterListContext.prototype.parameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ParameterContext);
    } else {
        return this.getTypedRuleContext(ParameterContext,i);
    }
};

ParameterListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterParameterList(this);
	}
};

ParameterListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitParameterList(this);
	}
};




SolidityParser.ParameterListContext = ParameterListContext;

SolidityParser.prototype.parameterList = function() {

    var localctx = new ParameterListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, SolidityParser.RULE_parameterList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 409;
        this.match(SolidityParser.T__18);
        this.state = 418;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.T__25 || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__45 - 33)) | (1 << (SolidityParser.T__46 - 33)) | (1 << (SolidityParser.T__47 - 33)) | (1 << (SolidityParser.T__48 - 33)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.Identifier - 94)))) !== 0)) {
            this.state = 410;
            this.parameter();
            this.state = 415;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 411;
                this.match(SolidityParser.T__12);
                this.state = 412;
                this.parameter();
                this.state = 417;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 420;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_parameter;
    return this;
}

ParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParameterContext.prototype.constructor = ParameterContext;

ParameterContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ParameterContext.prototype.storageLocation = function() {
    return this.getTypedRuleContext(StorageLocationContext,0);
};

ParameterContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterParameter(this);
	}
};

ParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitParameter(this);
	}
};




SolidityParser.ParameterContext = ParameterContext;

SolidityParser.prototype.parameter = function() {

    var localctx = new ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, SolidityParser.RULE_parameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 422;
        this.typeName(0);
        this.state = 424;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__34 || _la===SolidityParser.T__35) {
            this.state = 423;
            this.storageLocation();
        }

        this.state = 427;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
            this.state = 426;
            this.identifier();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeNameListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_typeNameList;
    return this;
}

TypeNameListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameListContext.prototype.constructor = TypeNameListContext;

TypeNameListContext.prototype.unnamedParameter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(UnnamedParameterContext);
    } else {
        return this.getTypedRuleContext(UnnamedParameterContext,i);
    }
};

TypeNameListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterTypeNameList(this);
	}
};

TypeNameListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitTypeNameList(this);
	}
};




SolidityParser.TypeNameListContext = TypeNameListContext;

SolidityParser.prototype.typeNameList = function() {

    var localctx = new TypeNameListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, SolidityParser.RULE_typeNameList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 429;
        this.match(SolidityParser.T__18);
        this.state = 438;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.T__25 || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__45 - 33)) | (1 << (SolidityParser.T__46 - 33)) | (1 << (SolidityParser.T__47 - 33)) | (1 << (SolidityParser.T__48 - 33)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.Identifier - 94)))) !== 0)) {
            this.state = 430;
            this.unnamedParameter();
            this.state = 435;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 431;
                this.match(SolidityParser.T__12);
                this.state = 432;
                this.unnamedParameter();
                this.state = 437;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
        }

        this.state = 440;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnnamedParameterContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_unnamedParameter;
    return this;
}

UnnamedParameterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnnamedParameterContext.prototype.constructor = UnnamedParameterContext;

UnnamedParameterContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

UnnamedParameterContext.prototype.storageLocation = function() {
    return this.getTypedRuleContext(StorageLocationContext,0);
};

UnnamedParameterContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterUnnamedParameter(this);
	}
};

UnnamedParameterContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitUnnamedParameter(this);
	}
};




SolidityParser.UnnamedParameterContext = UnnamedParameterContext;

SolidityParser.prototype.unnamedParameter = function() {

    var localctx = new UnnamedParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, SolidityParser.RULE_unnamedParameter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 442;
        this.typeName(0);
        this.state = 444;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__34 || _la===SolidityParser.T__35) {
            this.state = 443;
            this.storageLocation();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclaration;
    return this;
}

VariableDeclarationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationContext.prototype.constructor = VariableDeclarationContext;

VariableDeclarationContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

VariableDeclarationContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

VariableDeclarationContext.prototype.storageLocation = function() {
    return this.getTypedRuleContext(StorageLocationContext,0);
};

VariableDeclarationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVariableDeclaration(this);
	}
};

VariableDeclarationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVariableDeclaration(this);
	}
};




SolidityParser.VariableDeclarationContext = VariableDeclarationContext;

SolidityParser.prototype.variableDeclaration = function() {

    var localctx = new VariableDeclarationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, SolidityParser.RULE_variableDeclaration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 446;
        this.typeName(0);
        this.state = 448;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__34 || _la===SolidityParser.T__35) {
            this.state = 447;
            this.storageLocation();
        }

        this.state = 450;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_typeName;
    return this;
}

TypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypeNameContext.prototype.constructor = TypeNameContext;

TypeNameContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

TypeNameContext.prototype.userDefinedTypeName = function() {
    return this.getTypedRuleContext(UserDefinedTypeNameContext,0);
};

TypeNameContext.prototype.mapping = function() {
    return this.getTypedRuleContext(MappingContext,0);
};

TypeNameContext.prototype.functionTypeName = function() {
    return this.getTypedRuleContext(FunctionTypeNameContext,0);
};

TypeNameContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

TypeNameContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

TypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterTypeName(this);
	}
};

TypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitTypeName(this);
	}
};



SolidityParser.prototype.typeName = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TypeNameContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 60;
    this.enterRecursionRule(localctx, 60, SolidityParser.RULE_typeName, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 457;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__45:
        case SolidityParser.T__46:
        case SolidityParser.T__47:
        case SolidityParser.T__48:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
            this.state = 453;
            this.elementaryTypeName();
            break;
        case SolidityParser.T__10:
        case SolidityParser.Identifier:
            this.state = 454;
            this.userDefinedTypeName();
            break;
        case SolidityParser.T__32:
            this.state = 455;
            this.mapping();
            break;
        case SolidityParser.T__25:
            this.state = 456;
            this.functionTypeName();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 467;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,48,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TypeNameContext(this, _parentctx, _parentState);
                this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_typeName);
                this.state = 459;
                if (!( this.precpred(this._ctx, 2))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                }
                this.state = 460;
                this.match(SolidityParser.T__29);
                this.state = 462;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__29))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (SolidityParser.T__45 - 46)) | (1 << (SolidityParser.T__46 - 46)) | (1 << (SolidityParser.T__47 - 46)) | (1 << (SolidityParser.T__48 - 46)) | (1 << (SolidityParser.T__49 - 46)) | (1 << (SolidityParser.T__50 - 46)) | (1 << (SolidityParser.T__51 - 46)) | (1 << (SolidityParser.T__52 - 46)) | (1 << (SolidityParser.T__53 - 46)) | (1 << (SolidityParser.T__54 - 46)) | (1 << (SolidityParser.T__55 - 46)) | (1 << (SolidityParser.T__56 - 46)) | (1 << (SolidityParser.T__57 - 46)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.BooleanLiteral - 94)) | (1 << (SolidityParser.DecimalNumber - 94)) | (1 << (SolidityParser.HexNumber - 94)) | (1 << (SolidityParser.HexLiteral - 94)) | (1 << (SolidityParser.Identifier - 94)) | (1 << (SolidityParser.StringLiteral - 94)))) !== 0)) {
                    this.state = 461;
                    this.expression(0);
                }

                this.state = 464;
                this.match(SolidityParser.T__30); 
            }
            this.state = 469;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,48,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function UserDefinedTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_userDefinedTypeName;
    return this;
}

UserDefinedTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UserDefinedTypeNameContext.prototype.constructor = UserDefinedTypeNameContext;

UserDefinedTypeNameContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

UserDefinedTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterUserDefinedTypeName(this);
	}
};

UserDefinedTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitUserDefinedTypeName(this);
	}
};




SolidityParser.UserDefinedTypeNameContext = UserDefinedTypeNameContext;

SolidityParser.prototype.userDefinedTypeName = function() {

    var localctx = new UserDefinedTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, SolidityParser.RULE_userDefinedTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 470;
        this.identifier();
        this.state = 475;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,49,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 471;
                this.match(SolidityParser.T__31);
                this.state = 472;
                this.identifier(); 
            }
            this.state = 477;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,49,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MappingContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_mapping;
    return this;
}

MappingContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MappingContext.prototype.constructor = MappingContext;

MappingContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

MappingContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

MappingContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterMapping(this);
	}
};

MappingContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitMapping(this);
	}
};




SolidityParser.MappingContext = MappingContext;

SolidityParser.prototype.mapping = function() {

    var localctx = new MappingContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, SolidityParser.RULE_mapping);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 478;
        this.match(SolidityParser.T__32);
        this.state = 479;
        this.match(SolidityParser.T__18);
        this.state = 480;
        this.elementaryTypeName();
        this.state = 481;
        this.match(SolidityParser.T__33);
        this.state = 482;
        this.typeName(0);
        this.state = 483;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionTypeName;
    return this;
}

FunctionTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionTypeNameContext.prototype.constructor = FunctionTypeNameContext;

FunctionTypeNameContext.prototype.typeNameList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TypeNameListContext);
    } else {
        return this.getTypedRuleContext(TypeNameListContext,i);
    }
};

FunctionTypeNameContext.prototype.InternalKeyword = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.InternalKeyword);
    } else {
        return this.getToken(SolidityParser.InternalKeyword, i);
    }
};


FunctionTypeNameContext.prototype.ExternalKeyword = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.ExternalKeyword);
    } else {
        return this.getToken(SolidityParser.ExternalKeyword, i);
    }
};


FunctionTypeNameContext.prototype.stateMutability = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StateMutabilityContext);
    } else {
        return this.getTypedRuleContext(StateMutabilityContext,i);
    }
};

FunctionTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterFunctionTypeName(this);
	}
};

FunctionTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitFunctionTypeName(this);
	}
};




SolidityParser.FunctionTypeNameContext = FunctionTypeNameContext;

SolidityParser.prototype.functionTypeName = function() {

    var localctx = new FunctionTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, SolidityParser.RULE_functionTypeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 485;
        this.match(SolidityParser.T__25);
        this.state = 486;
        this.typeNameList();
        this.state = 492;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,51,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 490;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case SolidityParser.InternalKeyword:
                    this.state = 487;
                    this.match(SolidityParser.InternalKeyword);
                    break;
                case SolidityParser.ExternalKeyword:
                    this.state = 488;
                    this.match(SolidityParser.ExternalKeyword);
                    break;
                case SolidityParser.ConstantKeyword:
                case SolidityParser.PayableKeyword:
                case SolidityParser.PureKeyword:
                case SolidityParser.ViewKeyword:
                    this.state = 489;
                    this.stateMutability();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 494;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,51,this._ctx);
        }

        this.state = 497;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
        if(la_===1) {
            this.state = 495;
            this.match(SolidityParser.T__26);
            this.state = 496;
            this.typeNameList();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StorageLocationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_storageLocation;
    return this;
}

StorageLocationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StorageLocationContext.prototype.constructor = StorageLocationContext;


StorageLocationContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStorageLocation(this);
	}
};

StorageLocationContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStorageLocation(this);
	}
};




SolidityParser.StorageLocationContext = StorageLocationContext;

SolidityParser.prototype.storageLocation = function() {

    var localctx = new StorageLocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, SolidityParser.RULE_storageLocation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 499;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.T__34 || _la===SolidityParser.T__35)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StateMutabilityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_stateMutability;
    return this;
}

StateMutabilityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StateMutabilityContext.prototype.constructor = StateMutabilityContext;

StateMutabilityContext.prototype.PureKeyword = function() {
    return this.getToken(SolidityParser.PureKeyword, 0);
};

StateMutabilityContext.prototype.ConstantKeyword = function() {
    return this.getToken(SolidityParser.ConstantKeyword, 0);
};

StateMutabilityContext.prototype.ViewKeyword = function() {
    return this.getToken(SolidityParser.ViewKeyword, 0);
};

StateMutabilityContext.prototype.PayableKeyword = function() {
    return this.getToken(SolidityParser.PayableKeyword, 0);
};

StateMutabilityContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStateMutability(this);
	}
};

StateMutabilityContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStateMutability(this);
	}
};




SolidityParser.StateMutabilityContext = StateMutabilityContext;

SolidityParser.prototype.stateMutability = function() {

    var localctx = new StateMutabilityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, SolidityParser.RULE_stateMutability);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 501;
        _la = this._input.LA(1);
        if(!(((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (SolidityParser.ConstantKeyword - 107)) | (1 << (SolidityParser.PayableKeyword - 107)) | (1 << (SolidityParser.PureKeyword - 107)) | (1 << (SolidityParser.ViewKeyword - 107)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_block;
    return this;
}

BlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BlockContext.prototype.constructor = BlockContext;

BlockContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

BlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterBlock(this);
	}
};

BlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitBlock(this);
	}
};




SolidityParser.BlockContext = BlockContext;

SolidityParser.prototype.block = function() {

    var localctx = new BlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, SolidityParser.RULE_block);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 503;
        this.match(SolidityParser.T__11);
        this.state = 507;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__11) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__25) | (1 << SolidityParser.T__29))) !== 0) || ((((_la - 33)) & ~0x1f) == 0 && ((1 << (_la - 33)) & ((1 << (SolidityParser.T__32 - 33)) | (1 << (SolidityParser.T__36 - 33)) | (1 << (SolidityParser.T__38 - 33)) | (1 << (SolidityParser.T__39 - 33)) | (1 << (SolidityParser.T__40 - 33)) | (1 << (SolidityParser.T__41 - 33)) | (1 << (SolidityParser.T__42 - 33)) | (1 << (SolidityParser.T__43 - 33)) | (1 << (SolidityParser.T__44 - 33)) | (1 << (SolidityParser.T__45 - 33)) | (1 << (SolidityParser.T__46 - 33)) | (1 << (SolidityParser.T__47 - 33)) | (1 << (SolidityParser.T__48 - 33)) | (1 << (SolidityParser.T__49 - 33)) | (1 << (SolidityParser.T__50 - 33)) | (1 << (SolidityParser.T__51 - 33)) | (1 << (SolidityParser.T__52 - 33)) | (1 << (SolidityParser.T__53 - 33)) | (1 << (SolidityParser.T__54 - 33)) | (1 << (SolidityParser.T__55 - 33)) | (1 << (SolidityParser.T__56 - 33)) | (1 << (SolidityParser.T__57 - 33)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.BooleanLiteral - 94)) | (1 << (SolidityParser.DecimalNumber - 94)) | (1 << (SolidityParser.HexNumber - 94)) | (1 << (SolidityParser.HexLiteral - 94)) | (1 << (SolidityParser.Identifier - 94)) | (1 << (SolidityParser.StringLiteral - 94)))) !== 0)) {
            this.state = 504;
            this.statement();
            this.state = 509;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 510;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_statement;
    return this;
}

StatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StatementContext.prototype.constructor = StatementContext;

StatementContext.prototype.ifStatement = function() {
    return this.getTypedRuleContext(IfStatementContext,0);
};

StatementContext.prototype.whileStatement = function() {
    return this.getTypedRuleContext(WhileStatementContext,0);
};

StatementContext.prototype.forStatement = function() {
    return this.getTypedRuleContext(ForStatementContext,0);
};

StatementContext.prototype.block = function() {
    return this.getTypedRuleContext(BlockContext,0);
};

StatementContext.prototype.inlineAssemblyStatement = function() {
    return this.getTypedRuleContext(InlineAssemblyStatementContext,0);
};

StatementContext.prototype.doWhileStatement = function() {
    return this.getTypedRuleContext(DoWhileStatementContext,0);
};

StatementContext.prototype.continueStatement = function() {
    return this.getTypedRuleContext(ContinueStatementContext,0);
};

StatementContext.prototype.breakStatement = function() {
    return this.getTypedRuleContext(BreakStatementContext,0);
};

StatementContext.prototype.returnStatement = function() {
    return this.getTypedRuleContext(ReturnStatementContext,0);
};

StatementContext.prototype.throwStatement = function() {
    return this.getTypedRuleContext(ThrowStatementContext,0);
};

StatementContext.prototype.simpleStatement = function() {
    return this.getTypedRuleContext(SimpleStatementContext,0);
};

StatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterStatement(this);
	}
};

StatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitStatement(this);
	}
};




SolidityParser.StatementContext = StatementContext;

SolidityParser.prototype.statement = function() {

    var localctx = new StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, SolidityParser.RULE_statement);
    try {
        this.state = 523;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__36:
            this.enterOuterAlt(localctx, 1);
            this.state = 512;
            this.ifStatement();
            break;
        case SolidityParser.T__38:
            this.enterOuterAlt(localctx, 2);
            this.state = 513;
            this.whileStatement();
            break;
        case SolidityParser.T__22:
            this.enterOuterAlt(localctx, 3);
            this.state = 514;
            this.forStatement();
            break;
        case SolidityParser.T__11:
            this.enterOuterAlt(localctx, 4);
            this.state = 515;
            this.block();
            break;
        case SolidityParser.T__39:
            this.enterOuterAlt(localctx, 5);
            this.state = 516;
            this.inlineAssemblyStatement();
            break;
        case SolidityParser.T__40:
            this.enterOuterAlt(localctx, 6);
            this.state = 517;
            this.doWhileStatement();
            break;
        case SolidityParser.T__41:
            this.enterOuterAlt(localctx, 7);
            this.state = 518;
            this.continueStatement();
            break;
        case SolidityParser.T__42:
            this.enterOuterAlt(localctx, 8);
            this.state = 519;
            this.breakStatement();
            break;
        case SolidityParser.T__43:
            this.enterOuterAlt(localctx, 9);
            this.state = 520;
            this.returnStatement();
            break;
        case SolidityParser.T__44:
            this.enterOuterAlt(localctx, 10);
            this.state = 521;
            this.throwStatement();
            break;
        case SolidityParser.T__10:
        case SolidityParser.T__18:
        case SolidityParser.T__25:
        case SolidityParser.T__29:
        case SolidityParser.T__32:
        case SolidityParser.T__45:
        case SolidityParser.T__46:
        case SolidityParser.T__47:
        case SolidityParser.T__48:
        case SolidityParser.T__49:
        case SolidityParser.T__50:
        case SolidityParser.T__51:
        case SolidityParser.T__52:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.Identifier:
        case SolidityParser.StringLiteral:
            this.enterOuterAlt(localctx, 11);
            this.state = 522;
            this.simpleStatement();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expressionStatement;
    return this;
}

ExpressionStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionStatementContext.prototype.constructor = ExpressionStatementContext;

ExpressionStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ExpressionStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterExpressionStatement(this);
	}
};

ExpressionStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitExpressionStatement(this);
	}
};




SolidityParser.ExpressionStatementContext = ExpressionStatementContext;

SolidityParser.prototype.expressionStatement = function() {

    var localctx = new ExpressionStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, SolidityParser.RULE_expressionStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 525;
        this.expression(0);
        this.state = 526;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IfStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_ifStatement;
    return this;
}

IfStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IfStatementContext.prototype.constructor = IfStatementContext;

IfStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

IfStatementContext.prototype.statement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(StatementContext);
    } else {
        return this.getTypedRuleContext(StatementContext,i);
    }
};

IfStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIfStatement(this);
	}
};

IfStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIfStatement(this);
	}
};




SolidityParser.IfStatementContext = IfStatementContext;

SolidityParser.prototype.ifStatement = function() {

    var localctx = new IfStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, SolidityParser.RULE_ifStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 528;
        this.match(SolidityParser.T__36);
        this.state = 529;
        this.match(SolidityParser.T__18);
        this.state = 530;
        this.expression(0);
        this.state = 531;
        this.match(SolidityParser.T__19);
        this.state = 532;
        this.statement();
        this.state = 535;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
        if(la_===1) {
            this.state = 533;
            this.match(SolidityParser.T__37);
            this.state = 534;
            this.statement();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_whileStatement;
    return this;
}

WhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhileStatementContext.prototype.constructor = WhileStatementContext;

WhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

WhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

WhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterWhileStatement(this);
	}
};

WhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitWhileStatement(this);
	}
};




SolidityParser.WhileStatementContext = WhileStatementContext;

SolidityParser.prototype.whileStatement = function() {

    var localctx = new WhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, SolidityParser.RULE_whileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 537;
        this.match(SolidityParser.T__38);
        this.state = 538;
        this.match(SolidityParser.T__18);
        this.state = 539;
        this.expression(0);
        this.state = 540;
        this.match(SolidityParser.T__19);
        this.state = 541;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimpleStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_simpleStatement;
    return this;
}

SimpleStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimpleStatementContext.prototype.constructor = SimpleStatementContext;

SimpleStatementContext.prototype.variableDeclarationStatement = function() {
    return this.getTypedRuleContext(VariableDeclarationStatementContext,0);
};

SimpleStatementContext.prototype.expressionStatement = function() {
    return this.getTypedRuleContext(ExpressionStatementContext,0);
};

SimpleStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterSimpleStatement(this);
	}
};

SimpleStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitSimpleStatement(this);
	}
};




SolidityParser.SimpleStatementContext = SimpleStatementContext;

SolidityParser.prototype.simpleStatement = function() {

    var localctx = new SimpleStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, SolidityParser.RULE_simpleStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 545;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
        switch(la_) {
        case 1:
            this.state = 543;
            this.variableDeclarationStatement();
            break;

        case 2:
            this.state = 544;
            this.expressionStatement();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ForStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_forStatement;
    return this;
}

ForStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ForStatementContext.prototype.constructor = ForStatementContext;

ForStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

ForStatementContext.prototype.simpleStatement = function() {
    return this.getTypedRuleContext(SimpleStatementContext,0);
};

ForStatementContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ForStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterForStatement(this);
	}
};

ForStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitForStatement(this);
	}
};




SolidityParser.ForStatementContext = ForStatementContext;

SolidityParser.prototype.forStatement = function() {

    var localctx = new ForStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, SolidityParser.RULE_forStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 547;
        this.match(SolidityParser.T__22);
        this.state = 548;
        this.match(SolidityParser.T__18);
        this.state = 551;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__10:
        case SolidityParser.T__18:
        case SolidityParser.T__25:
        case SolidityParser.T__29:
        case SolidityParser.T__32:
        case SolidityParser.T__45:
        case SolidityParser.T__46:
        case SolidityParser.T__47:
        case SolidityParser.T__48:
        case SolidityParser.T__49:
        case SolidityParser.T__50:
        case SolidityParser.T__51:
        case SolidityParser.T__52:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.Identifier:
        case SolidityParser.StringLiteral:
            this.state = 549;
            this.simpleStatement();
            break;
        case SolidityParser.T__1:
            this.state = 550;
            this.match(SolidityParser.T__1);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__29))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (SolidityParser.T__45 - 46)) | (1 << (SolidityParser.T__46 - 46)) | (1 << (SolidityParser.T__47 - 46)) | (1 << (SolidityParser.T__48 - 46)) | (1 << (SolidityParser.T__49 - 46)) | (1 << (SolidityParser.T__50 - 46)) | (1 << (SolidityParser.T__51 - 46)) | (1 << (SolidityParser.T__52 - 46)) | (1 << (SolidityParser.T__53 - 46)) | (1 << (SolidityParser.T__54 - 46)) | (1 << (SolidityParser.T__55 - 46)) | (1 << (SolidityParser.T__56 - 46)) | (1 << (SolidityParser.T__57 - 46)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.BooleanLiteral - 94)) | (1 << (SolidityParser.DecimalNumber - 94)) | (1 << (SolidityParser.HexNumber - 94)) | (1 << (SolidityParser.HexLiteral - 94)) | (1 << (SolidityParser.Identifier - 94)) | (1 << (SolidityParser.StringLiteral - 94)))) !== 0)) {
            this.state = 553;
            this.expression(0);
        }

        this.state = 556;
        this.match(SolidityParser.T__1);
        this.state = 558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__29))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (SolidityParser.T__45 - 46)) | (1 << (SolidityParser.T__46 - 46)) | (1 << (SolidityParser.T__47 - 46)) | (1 << (SolidityParser.T__48 - 46)) | (1 << (SolidityParser.T__49 - 46)) | (1 << (SolidityParser.T__50 - 46)) | (1 << (SolidityParser.T__51 - 46)) | (1 << (SolidityParser.T__52 - 46)) | (1 << (SolidityParser.T__53 - 46)) | (1 << (SolidityParser.T__54 - 46)) | (1 << (SolidityParser.T__55 - 46)) | (1 << (SolidityParser.T__56 - 46)) | (1 << (SolidityParser.T__57 - 46)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.BooleanLiteral - 94)) | (1 << (SolidityParser.DecimalNumber - 94)) | (1 << (SolidityParser.HexNumber - 94)) | (1 << (SolidityParser.HexLiteral - 94)) | (1 << (SolidityParser.Identifier - 94)) | (1 << (SolidityParser.StringLiteral - 94)))) !== 0)) {
            this.state = 557;
            this.expression(0);
        }

        this.state = 560;
        this.match(SolidityParser.T__19);
        this.state = 561;
        this.statement();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineAssemblyStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_inlineAssemblyStatement;
    return this;
}

InlineAssemblyStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineAssemblyStatementContext.prototype.constructor = InlineAssemblyStatementContext;

InlineAssemblyStatementContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

InlineAssemblyStatementContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

InlineAssemblyStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterInlineAssemblyStatement(this);
	}
};

InlineAssemblyStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitInlineAssemblyStatement(this);
	}
};




SolidityParser.InlineAssemblyStatementContext = InlineAssemblyStatementContext;

SolidityParser.prototype.inlineAssemblyStatement = function() {

    var localctx = new InlineAssemblyStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, SolidityParser.RULE_inlineAssemblyStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 563;
        this.match(SolidityParser.T__39);
        this.state = 565;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.StringLiteral) {
            this.state = 564;
            this.match(SolidityParser.StringLiteral);
        }

        this.state = 567;
        this.assemblyBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DoWhileStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_doWhileStatement;
    return this;
}

DoWhileStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DoWhileStatementContext.prototype.constructor = DoWhileStatementContext;

DoWhileStatementContext.prototype.statement = function() {
    return this.getTypedRuleContext(StatementContext,0);
};

DoWhileStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

DoWhileStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterDoWhileStatement(this);
	}
};

DoWhileStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitDoWhileStatement(this);
	}
};




SolidityParser.DoWhileStatementContext = DoWhileStatementContext;

SolidityParser.prototype.doWhileStatement = function() {

    var localctx = new DoWhileStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, SolidityParser.RULE_doWhileStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 569;
        this.match(SolidityParser.T__40);
        this.state = 570;
        this.statement();
        this.state = 571;
        this.match(SolidityParser.T__38);
        this.state = 572;
        this.match(SolidityParser.T__18);
        this.state = 573;
        this.expression(0);
        this.state = 574;
        this.match(SolidityParser.T__19);
        this.state = 575;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ContinueStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_continueStatement;
    return this;
}

ContinueStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ContinueStatementContext.prototype.constructor = ContinueStatementContext;


ContinueStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterContinueStatement(this);
	}
};

ContinueStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitContinueStatement(this);
	}
};




SolidityParser.ContinueStatementContext = ContinueStatementContext;

SolidityParser.prototype.continueStatement = function() {

    var localctx = new ContinueStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, SolidityParser.RULE_continueStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 577;
        this.match(SolidityParser.T__41);
        this.state = 578;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BreakStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_breakStatement;
    return this;
}

BreakStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BreakStatementContext.prototype.constructor = BreakStatementContext;


BreakStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterBreakStatement(this);
	}
};

BreakStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitBreakStatement(this);
	}
};




SolidityParser.BreakStatementContext = BreakStatementContext;

SolidityParser.prototype.breakStatement = function() {

    var localctx = new BreakStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, SolidityParser.RULE_breakStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 580;
        this.match(SolidityParser.T__42);
        this.state = 581;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ReturnStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_returnStatement;
    return this;
}

ReturnStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ReturnStatementContext.prototype.constructor = ReturnStatementContext;

ReturnStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

ReturnStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterReturnStatement(this);
	}
};

ReturnStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitReturnStatement(this);
	}
};




SolidityParser.ReturnStatementContext = ReturnStatementContext;

SolidityParser.prototype.returnStatement = function() {

    var localctx = new ReturnStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, SolidityParser.RULE_returnStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 583;
        this.match(SolidityParser.T__43);
        this.state = 585;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__29))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (SolidityParser.T__45 - 46)) | (1 << (SolidityParser.T__46 - 46)) | (1 << (SolidityParser.T__47 - 46)) | (1 << (SolidityParser.T__48 - 46)) | (1 << (SolidityParser.T__49 - 46)) | (1 << (SolidityParser.T__50 - 46)) | (1 << (SolidityParser.T__51 - 46)) | (1 << (SolidityParser.T__52 - 46)) | (1 << (SolidityParser.T__53 - 46)) | (1 << (SolidityParser.T__54 - 46)) | (1 << (SolidityParser.T__55 - 46)) | (1 << (SolidityParser.T__56 - 46)) | (1 << (SolidityParser.T__57 - 46)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.BooleanLiteral - 94)) | (1 << (SolidityParser.DecimalNumber - 94)) | (1 << (SolidityParser.HexNumber - 94)) | (1 << (SolidityParser.HexLiteral - 94)) | (1 << (SolidityParser.Identifier - 94)) | (1 << (SolidityParser.StringLiteral - 94)))) !== 0)) {
            this.state = 584;
            this.expression(0);
        }

        this.state = 587;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ThrowStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_throwStatement;
    return this;
}

ThrowStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ThrowStatementContext.prototype.constructor = ThrowStatementContext;


ThrowStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterThrowStatement(this);
	}
};

ThrowStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitThrowStatement(this);
	}
};




SolidityParser.ThrowStatementContext = ThrowStatementContext;

SolidityParser.prototype.throwStatement = function() {

    var localctx = new ThrowStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, SolidityParser.RULE_throwStatement);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 589;
        this.match(SolidityParser.T__44);
        this.state = 590;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function VariableDeclarationStatementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_variableDeclarationStatement;
    return this;
}

VariableDeclarationStatementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VariableDeclarationStatementContext.prototype.constructor = VariableDeclarationStatementContext;

VariableDeclarationStatementContext.prototype.identifierList = function() {
    return this.getTypedRuleContext(IdentifierListContext,0);
};

VariableDeclarationStatementContext.prototype.variableDeclaration = function() {
    return this.getTypedRuleContext(VariableDeclarationContext,0);
};

VariableDeclarationStatementContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

VariableDeclarationStatementContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterVariableDeclarationStatement(this);
	}
};

VariableDeclarationStatementContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitVariableDeclarationStatement(this);
	}
};




SolidityParser.VariableDeclarationStatementContext = VariableDeclarationStatementContext;

SolidityParser.prototype.variableDeclarationStatement = function() {

    var localctx = new VariableDeclarationStatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, SolidityParser.RULE_variableDeclarationStatement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 595;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
        switch(la_) {
        case 1:
            this.state = 592;
            this.match(SolidityParser.T__45);
            this.state = 593;
            this.identifierList();
            break;

        case 2:
            this.state = 594;
            this.variableDeclaration();
            break;

        }
        this.state = 599;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__20) {
            this.state = 597;
            this.match(SolidityParser.T__20);
            this.state = 598;
            this.expression(0);
        }

        this.state = 601;
        this.match(SolidityParser.T__1);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_identifierList;
    return this;
}

IdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierListContext.prototype.constructor = IdentifierListContext;

IdentifierListContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

IdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIdentifierList(this);
	}
};

IdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIdentifierList(this);
	}
};




SolidityParser.IdentifierListContext = IdentifierListContext;

SolidityParser.prototype.identifierList = function() {

    var localctx = new IdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, SolidityParser.RULE_identifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 603;
        this.match(SolidityParser.T__18);
        this.state = 610;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,65,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 605;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
                    this.state = 604;
                    this.identifier();
                }

                this.state = 607;
                this.match(SolidityParser.T__12); 
            }
            this.state = 612;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,65,this._ctx);
        }

        this.state = 614;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
            this.state = 613;
            this.identifier();
        }

        this.state = 616;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementaryTypeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_elementaryTypeName;
    return this;
}

ElementaryTypeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementaryTypeNameContext.prototype.constructor = ElementaryTypeNameContext;

ElementaryTypeNameContext.prototype.Int = function() {
    return this.getToken(SolidityParser.Int, 0);
};

ElementaryTypeNameContext.prototype.Uint = function() {
    return this.getToken(SolidityParser.Uint, 0);
};

ElementaryTypeNameContext.prototype.Byte = function() {
    return this.getToken(SolidityParser.Byte, 0);
};

ElementaryTypeNameContext.prototype.Fixed = function() {
    return this.getToken(SolidityParser.Fixed, 0);
};

ElementaryTypeNameContext.prototype.Ufixed = function() {
    return this.getToken(SolidityParser.Ufixed, 0);
};

ElementaryTypeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterElementaryTypeName(this);
	}
};

ElementaryTypeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitElementaryTypeName(this);
	}
};




SolidityParser.ElementaryTypeNameContext = ElementaryTypeNameContext;

SolidityParser.prototype.elementaryTypeName = function() {

    var localctx = new ElementaryTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, SolidityParser.RULE_elementaryTypeName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 618;
        _la = this._input.LA(1);
        if(!(((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (SolidityParser.T__45 - 46)) | (1 << (SolidityParser.T__46 - 46)) | (1 << (SolidityParser.T__47 - 46)) | (1 << (SolidityParser.T__48 - 46)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expression;
    return this;
}

ExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionContext.prototype.constructor = ExpressionContext;

ExpressionContext.prototype.typeName = function() {
    return this.getTypedRuleContext(TypeNameContext,0);
};

ExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionContext.prototype.primaryExpression = function() {
    return this.getTypedRuleContext(PrimaryExpressionContext,0);
};

ExpressionContext.prototype.functionCallArguments = function() {
    return this.getTypedRuleContext(FunctionCallArgumentsContext,0);
};

ExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterExpression(this);
	}
};

ExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitExpression(this);
	}
};



SolidityParser.prototype.expression = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ExpressionContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 104;
    this.enterRecursionRule(localctx, 104, SolidityParser.RULE_expression, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 638;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
        switch(la_) {
        case 1:
            this.state = 621;
            this.match(SolidityParser.T__51);
            this.state = 622;
            this.typeName(0);
            break;

        case 2:
            this.state = 623;
            this.match(SolidityParser.T__18);
            this.state = 624;
            this.expression(0);
            this.state = 625;
            this.match(SolidityParser.T__19);
            break;

        case 3:
            this.state = 627;
            _la = this._input.LA(1);
            if(!(_la===SolidityParser.T__49 || _la===SolidityParser.T__50)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 628;
            this.expression(19);
            break;

        case 4:
            this.state = 629;
            _la = this._input.LA(1);
            if(!(_la===SolidityParser.T__52 || _la===SolidityParser.T__53)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 630;
            this.expression(18);
            break;

        case 5:
            this.state = 631;
            _la = this._input.LA(1);
            if(!(_la===SolidityParser.T__54 || _la===SolidityParser.T__55)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 632;
            this.expression(17);
            break;

        case 6:
            this.state = 633;
            this.match(SolidityParser.T__56);
            this.state = 634;
            this.expression(16);
            break;

        case 7:
            this.state = 635;
            this.match(SolidityParser.T__57);
            this.state = 636;
            this.expression(15);
            break;

        case 8:
            this.state = 637;
            this.primaryExpression();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 699;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,69,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 697;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 640;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 641;
                    this.match(SolidityParser.T__58);
                    this.state = 642;
                    this.expression(15);
                    break;

                case 2:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 643;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 644;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__9 || _la===SolidityParser.T__59 || _la===SolidityParser.T__60)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 645;
                    this.expression(14);
                    break;

                case 3:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 646;
                    if (!( this.precpred(this._ctx, 12))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
                    }
                    this.state = 647;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__52 || _la===SolidityParser.T__53)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 648;
                    this.expression(13);
                    break;

                case 4:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 649;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 650;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__61 || _la===SolidityParser.T__62)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 651;
                    this.expression(12);
                    break;

                case 5:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 652;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 653;
                    this.match(SolidityParser.T__63);
                    this.state = 654;
                    this.expression(11);
                    break;

                case 6:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 655;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 656;
                    this.match(SolidityParser.T__2);
                    this.state = 657;
                    this.expression(10);
                    break;

                case 7:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 658;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 659;
                    this.match(SolidityParser.T__64);
                    this.state = 660;
                    this.expression(9);
                    break;

                case 8:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 661;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 662;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__3) | (1 << SolidityParser.T__4) | (1 << SolidityParser.T__5) | (1 << SolidityParser.T__6))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 663;
                    this.expression(8);
                    break;

                case 9:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 664;
                    if (!( this.precpred(this._ctx, 6))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
                    }
                    this.state = 665;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__65 || _la===SolidityParser.T__66)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 666;
                    this.expression(7);
                    break;

                case 10:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 667;
                    if (!( this.precpred(this._ctx, 5))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
                    }
                    this.state = 668;
                    this.match(SolidityParser.T__67);
                    this.state = 669;
                    this.expression(6);
                    break;

                case 11:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 670;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 671;
                    this.match(SolidityParser.T__68);
                    this.state = 672;
                    this.expression(5);
                    break;

                case 12:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 673;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 674;
                    this.match(SolidityParser.T__69);
                    this.state = 675;
                    this.expression(0);
                    this.state = 676;
                    this.match(SolidityParser.T__70);
                    this.state = 677;
                    this.expression(4);
                    break;

                case 13:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 679;
                    if (!( this.precpred(this._ctx, 2))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
                    }
                    this.state = 680;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__20 || ((((_la - 72)) & ~0x1f) == 0 && ((1 << (_la - 72)) & ((1 << (SolidityParser.T__71 - 72)) | (1 << (SolidityParser.T__72 - 72)) | (1 << (SolidityParser.T__73 - 72)) | (1 << (SolidityParser.T__74 - 72)) | (1 << (SolidityParser.T__75 - 72)) | (1 << (SolidityParser.T__76 - 72)) | (1 << (SolidityParser.T__77 - 72)) | (1 << (SolidityParser.T__78 - 72)) | (1 << (SolidityParser.T__79 - 72)) | (1 << (SolidityParser.T__80 - 72)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 681;
                    this.expression(3);
                    break;

                case 14:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 682;
                    if (!( this.precpred(this._ctx, 25))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
                    }
                    this.state = 683;
                    _la = this._input.LA(1);
                    if(!(_la===SolidityParser.T__49 || _la===SolidityParser.T__50)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    break;

                case 15:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 684;
                    if (!( this.precpred(this._ctx, 23))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
                    }
                    this.state = 685;
                    this.match(SolidityParser.T__29);
                    this.state = 686;
                    this.expression(0);
                    this.state = 687;
                    this.match(SolidityParser.T__30);
                    break;

                case 16:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 689;
                    if (!( this.precpred(this._ctx, 22))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
                    }
                    this.state = 690;
                    this.match(SolidityParser.T__18);
                    this.state = 691;
                    this.functionCallArguments();
                    this.state = 692;
                    this.match(SolidityParser.T__19);
                    break;

                case 17:
                    localctx = new ExpressionContext(this, _parentctx, _parentState);
                    this.pushNewRecursionContext(localctx, _startState, SolidityParser.RULE_expression);
                    this.state = 694;
                    if (!( this.precpred(this._ctx, 21))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
                    }
                    this.state = 695;
                    this.match(SolidityParser.T__31);
                    this.state = 696;
                    this.identifier();
                    break;

                } 
            }
            this.state = 701;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,69,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};

function PrimaryExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_primaryExpression;
    return this;
}

PrimaryExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryExpressionContext.prototype.constructor = PrimaryExpressionContext;

PrimaryExpressionContext.prototype.BooleanLiteral = function() {
    return this.getToken(SolidityParser.BooleanLiteral, 0);
};

PrimaryExpressionContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

PrimaryExpressionContext.prototype.HexLiteral = function() {
    return this.getToken(SolidityParser.HexLiteral, 0);
};

PrimaryExpressionContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

PrimaryExpressionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

PrimaryExpressionContext.prototype.tupleExpression = function() {
    return this.getTypedRuleContext(TupleExpressionContext,0);
};

PrimaryExpressionContext.prototype.elementaryTypeNameExpression = function() {
    return this.getTypedRuleContext(ElementaryTypeNameExpressionContext,0);
};

PrimaryExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterPrimaryExpression(this);
	}
};

PrimaryExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitPrimaryExpression(this);
	}
};




SolidityParser.PrimaryExpressionContext = PrimaryExpressionContext;

SolidityParser.prototype.primaryExpression = function() {

    var localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, SolidityParser.RULE_primaryExpression);
    try {
        this.state = 709;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.BooleanLiteral:
            this.enterOuterAlt(localctx, 1);
            this.state = 702;
            this.match(SolidityParser.BooleanLiteral);
            break;
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
            this.enterOuterAlt(localctx, 2);
            this.state = 703;
            this.numberLiteral();
            break;
        case SolidityParser.HexLiteral:
            this.enterOuterAlt(localctx, 3);
            this.state = 704;
            this.match(SolidityParser.HexLiteral);
            break;
        case SolidityParser.StringLiteral:
            this.enterOuterAlt(localctx, 4);
            this.state = 705;
            this.match(SolidityParser.StringLiteral);
            break;
        case SolidityParser.T__10:
        case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 5);
            this.state = 706;
            this.identifier();
            break;
        case SolidityParser.T__18:
        case SolidityParser.T__29:
            this.enterOuterAlt(localctx, 6);
            this.state = 707;
            this.tupleExpression();
            break;
        case SolidityParser.T__45:
        case SolidityParser.T__46:
        case SolidityParser.T__47:
        case SolidityParser.T__48:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
            this.enterOuterAlt(localctx, 7);
            this.state = 708;
            this.elementaryTypeNameExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExpressionListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_expressionList;
    return this;
}

ExpressionListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExpressionListContext.prototype.constructor = ExpressionListContext;

ExpressionListContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

ExpressionListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterExpressionList(this);
	}
};

ExpressionListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitExpressionList(this);
	}
};




SolidityParser.ExpressionListContext = ExpressionListContext;

SolidityParser.prototype.expressionList = function() {

    var localctx = new ExpressionListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, SolidityParser.RULE_expressionList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 711;
        this.expression(0);
        this.state = 716;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__12) {
            this.state = 712;
            this.match(SolidityParser.T__12);
            this.state = 713;
            this.expression(0);
            this.state = 718;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameValueListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_nameValueList;
    return this;
}

NameValueListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameValueListContext.prototype.constructor = NameValueListContext;

NameValueListContext.prototype.nameValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NameValueContext);
    } else {
        return this.getTypedRuleContext(NameValueContext,i);
    }
};

NameValueListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterNameValueList(this);
	}
};

NameValueListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitNameValueList(this);
	}
};




SolidityParser.NameValueListContext = NameValueListContext;

SolidityParser.prototype.nameValueList = function() {

    var localctx = new NameValueListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, SolidityParser.RULE_nameValueList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 719;
        this.nameValue();
        this.state = 724;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,72,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 720;
                this.match(SolidityParser.T__12);
                this.state = 721;
                this.nameValue(); 
            }
            this.state = 726;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,72,this._ctx);
        }

        this.state = 728;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__12) {
            this.state = 727;
            this.match(SolidityParser.T__12);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_nameValue;
    return this;
}

NameValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameValueContext.prototype.constructor = NameValueContext;

NameValueContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

NameValueContext.prototype.expression = function() {
    return this.getTypedRuleContext(ExpressionContext,0);
};

NameValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterNameValue(this);
	}
};

NameValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitNameValue(this);
	}
};




SolidityParser.NameValueContext = NameValueContext;

SolidityParser.prototype.nameValue = function() {

    var localctx = new NameValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, SolidityParser.RULE_nameValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 730;
        this.identifier();
        this.state = 731;
        this.match(SolidityParser.T__70);
        this.state = 732;
        this.expression(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FunctionCallArgumentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_functionCallArguments;
    return this;
}

FunctionCallArgumentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FunctionCallArgumentsContext.prototype.constructor = FunctionCallArgumentsContext;

FunctionCallArgumentsContext.prototype.nameValueList = function() {
    return this.getTypedRuleContext(NameValueListContext,0);
};

FunctionCallArgumentsContext.prototype.expressionList = function() {
    return this.getTypedRuleContext(ExpressionListContext,0);
};

FunctionCallArgumentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterFunctionCallArguments(this);
	}
};

FunctionCallArgumentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitFunctionCallArguments(this);
	}
};




SolidityParser.FunctionCallArgumentsContext = FunctionCallArgumentsContext;

SolidityParser.prototype.functionCallArguments = function() {

    var localctx = new FunctionCallArgumentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, SolidityParser.RULE_functionCallArguments);
    var _la = 0; // Token type
    try {
        this.state = 742;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__11:
            this.enterOuterAlt(localctx, 1);
            this.state = 734;
            this.match(SolidityParser.T__11);
            this.state = 736;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier) {
                this.state = 735;
                this.nameValueList();
            }

            this.state = 738;
            this.match(SolidityParser.T__13);
            break;
        case SolidityParser.T__10:
        case SolidityParser.T__18:
        case SolidityParser.T__19:
        case SolidityParser.T__29:
        case SolidityParser.T__45:
        case SolidityParser.T__46:
        case SolidityParser.T__47:
        case SolidityParser.T__48:
        case SolidityParser.T__49:
        case SolidityParser.T__50:
        case SolidityParser.T__51:
        case SolidityParser.T__52:
        case SolidityParser.T__53:
        case SolidityParser.T__54:
        case SolidityParser.T__55:
        case SolidityParser.T__56:
        case SolidityParser.T__57:
        case SolidityParser.Int:
        case SolidityParser.Uint:
        case SolidityParser.Byte:
        case SolidityParser.Fixed:
        case SolidityParser.Ufixed:
        case SolidityParser.BooleanLiteral:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.Identifier:
        case SolidityParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 740;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__29))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (SolidityParser.T__45 - 46)) | (1 << (SolidityParser.T__46 - 46)) | (1 << (SolidityParser.T__47 - 46)) | (1 << (SolidityParser.T__48 - 46)) | (1 << (SolidityParser.T__49 - 46)) | (1 << (SolidityParser.T__50 - 46)) | (1 << (SolidityParser.T__51 - 46)) | (1 << (SolidityParser.T__52 - 46)) | (1 << (SolidityParser.T__53 - 46)) | (1 << (SolidityParser.T__54 - 46)) | (1 << (SolidityParser.T__55 - 46)) | (1 << (SolidityParser.T__56 - 46)) | (1 << (SolidityParser.T__57 - 46)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.BooleanLiteral - 94)) | (1 << (SolidityParser.DecimalNumber - 94)) | (1 << (SolidityParser.HexNumber - 94)) | (1 << (SolidityParser.HexLiteral - 94)) | (1 << (SolidityParser.Identifier - 94)) | (1 << (SolidityParser.StringLiteral - 94)))) !== 0)) {
                this.state = 739;
                this.expressionList();
            }

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyBlockContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyBlock;
    return this;
}

AssemblyBlockContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyBlockContext.prototype.constructor = AssemblyBlockContext;

AssemblyBlockContext.prototype.assemblyItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyItemContext);
    } else {
        return this.getTypedRuleContext(AssemblyItemContext,i);
    }
};

AssemblyBlockContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyBlock(this);
	}
};

AssemblyBlockContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyBlock(this);
	}
};




SolidityParser.AssemblyBlockContext = AssemblyBlockContext;

SolidityParser.prototype.assemblyBlock = function() {

    var localctx = new AssemblyBlockContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, SolidityParser.RULE_assemblyBlock);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 744;
        this.match(SolidityParser.T__11);
        this.state = 748;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__11) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__22) | (1 << SolidityParser.T__25))) !== 0) || ((((_la - 40)) & ~0x1f) == 0 && ((1 << (_la - 40)) & ((1 << (SolidityParser.T__39 - 40)) | (1 << (SolidityParser.T__41 - 40)) | (1 << (SolidityParser.T__42 - 40)) | (1 << (SolidityParser.T__43 - 40)) | (1 << (SolidityParser.T__46 - 40)))) !== 0) || ((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & ((1 << (SolidityParser.T__81 - 82)) | (1 << (SolidityParser.T__82 - 82)) | (1 << (SolidityParser.T__83 - 82)) | (1 << (SolidityParser.T__84 - 82)) | (1 << (SolidityParser.T__86 - 82)) | (1 << (SolidityParser.T__87 - 82)) | (1 << (SolidityParser.T__91 - 82)) | (1 << (SolidityParser.T__92 - 82)) | (1 << (SolidityParser.DecimalNumber - 82)) | (1 << (SolidityParser.HexNumber - 82)) | (1 << (SolidityParser.HexLiteral - 82)))) !== 0) || _la===SolidityParser.Identifier || _la===SolidityParser.StringLiteral) {
            this.state = 745;
            this.assemblyItem();
            this.state = 750;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 751;
        this.match(SolidityParser.T__13);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyItem;
    return this;
}

AssemblyItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyItemContext.prototype.constructor = AssemblyItemContext;

AssemblyItemContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AssemblyItemContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

AssemblyItemContext.prototype.assemblyExpression = function() {
    return this.getTypedRuleContext(AssemblyExpressionContext,0);
};

AssemblyItemContext.prototype.assemblyLocalDefinition = function() {
    return this.getTypedRuleContext(AssemblyLocalDefinitionContext,0);
};

AssemblyItemContext.prototype.assemblyAssignment = function() {
    return this.getTypedRuleContext(AssemblyAssignmentContext,0);
};

AssemblyItemContext.prototype.assemblyRightAssignment = function() {
    return this.getTypedRuleContext(AssemblyRightAssignmentContext,0);
};

AssemblyItemContext.prototype.labelDefinition = function() {
    return this.getTypedRuleContext(LabelDefinitionContext,0);
};

AssemblyItemContext.prototype.assemblySwitch = function() {
    return this.getTypedRuleContext(AssemblySwitchContext,0);
};

AssemblyItemContext.prototype.assemblyFunctionDefinition = function() {
    return this.getTypedRuleContext(AssemblyFunctionDefinitionContext,0);
};

AssemblyItemContext.prototype.assemblyFor = function() {
    return this.getTypedRuleContext(AssemblyForContext,0);
};

AssemblyItemContext.prototype.subAssembly = function() {
    return this.getTypedRuleContext(SubAssemblyContext,0);
};

AssemblyItemContext.prototype.dataSize = function() {
    return this.getTypedRuleContext(DataSizeContext,0);
};

AssemblyItemContext.prototype.linkerSymbol = function() {
    return this.getTypedRuleContext(LinkerSymbolContext,0);
};

AssemblyItemContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

AssemblyItemContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

AssemblyItemContext.prototype.HexLiteral = function() {
    return this.getToken(SolidityParser.HexLiteral, 0);
};

AssemblyItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyItem(this);
	}
};

AssemblyItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyItem(this);
	}
};




SolidityParser.AssemblyItemContext = AssemblyItemContext;

SolidityParser.prototype.assemblyItem = function() {

    var localctx = new AssemblyItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, SolidityParser.RULE_assemblyItem);
    try {
        this.state = 773;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 753;
            this.identifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 754;
            this.assemblyBlock();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 755;
            this.assemblyExpression();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 756;
            this.assemblyLocalDefinition();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 757;
            this.assemblyAssignment();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 758;
            this.assemblyRightAssignment();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 759;
            this.labelDefinition();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 760;
            this.assemblySwitch();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 761;
            this.assemblyFunctionDefinition();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 762;
            this.assemblyFor();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 763;
            this.match(SolidityParser.T__42);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 764;
            this.match(SolidityParser.T__41);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 765;
            this.subAssembly();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 766;
            this.dataSize();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 767;
            this.linkerSymbol();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 768;
            this.match(SolidityParser.T__81);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 769;
            this.match(SolidityParser.T__82);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 770;
            this.numberLiteral();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 771;
            this.match(SolidityParser.StringLiteral);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 772;
            this.match(SolidityParser.HexLiteral);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyExpression;
    return this;
}

AssemblyExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyExpressionContext.prototype.constructor = AssemblyExpressionContext;

AssemblyExpressionContext.prototype.assemblyCall = function() {
    return this.getTypedRuleContext(AssemblyCallContext,0);
};

AssemblyExpressionContext.prototype.assemblyLiteral = function() {
    return this.getTypedRuleContext(AssemblyLiteralContext,0);
};

AssemblyExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyExpression(this);
	}
};

AssemblyExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyExpression(this);
	}
};




SolidityParser.AssemblyExpressionContext = AssemblyExpressionContext;

SolidityParser.prototype.assemblyExpression = function() {

    var localctx = new AssemblyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, SolidityParser.RULE_assemblyExpression);
    try {
        this.state = 777;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__43:
        case SolidityParser.T__46:
        case SolidityParser.T__83:
        case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 775;
            this.assemblyCall();
            break;
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.StringLiteral:
            this.enterOuterAlt(localctx, 2);
            this.state = 776;
            this.assemblyLiteral();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyCallContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyCall;
    return this;
}

AssemblyCallContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyCallContext.prototype.constructor = AssemblyCallContext;

AssemblyCallContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

AssemblyCallContext.prototype.assemblyExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyExpressionContext);
    } else {
        return this.getTypedRuleContext(AssemblyExpressionContext,i);
    }
};

AssemblyCallContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyCall(this);
	}
};

AssemblyCallContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyCall(this);
	}
};




SolidityParser.AssemblyCallContext = AssemblyCallContext;

SolidityParser.prototype.assemblyCall = function() {

    var localctx = new AssemblyCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, SolidityParser.RULE_assemblyCall);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 779;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.T__43 || _la===SolidityParser.T__46 || _la===SolidityParser.T__83 || _la===SolidityParser.Identifier)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 792;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
        if(la_===1) {
            this.state = 780;
            this.match(SolidityParser.T__18);
            this.state = 782;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===SolidityParser.T__43 || _la===SolidityParser.T__46 || ((((_la - 84)) & ~0x1f) == 0 && ((1 << (_la - 84)) & ((1 << (SolidityParser.T__83 - 84)) | (1 << (SolidityParser.DecimalNumber - 84)) | (1 << (SolidityParser.HexNumber - 84)) | (1 << (SolidityParser.HexLiteral - 84)))) !== 0) || _la===SolidityParser.Identifier || _la===SolidityParser.StringLiteral) {
                this.state = 781;
                this.assemblyExpression();
            }

            this.state = 788;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 784;
                this.match(SolidityParser.T__12);
                this.state = 785;
                this.assemblyExpression();
                this.state = 790;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 791;
            this.match(SolidityParser.T__19);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyLocalDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyLocalDefinition;
    return this;
}

AssemblyLocalDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyLocalDefinitionContext.prototype.constructor = AssemblyLocalDefinitionContext;

AssemblyLocalDefinitionContext.prototype.assemblyIdentifierOrList = function() {
    return this.getTypedRuleContext(AssemblyIdentifierOrListContext,0);
};

AssemblyLocalDefinitionContext.prototype.assemblyExpression = function() {
    return this.getTypedRuleContext(AssemblyExpressionContext,0);
};

AssemblyLocalDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyLocalDefinition(this);
	}
};

AssemblyLocalDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyLocalDefinition(this);
	}
};




SolidityParser.AssemblyLocalDefinitionContext = AssemblyLocalDefinitionContext;

SolidityParser.prototype.assemblyLocalDefinition = function() {

    var localctx = new AssemblyLocalDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, SolidityParser.RULE_assemblyLocalDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this.match(SolidityParser.T__84);
        this.state = 795;
        this.assemblyIdentifierOrList();
        this.state = 796;
        this.match(SolidityParser.T__85);
        this.state = 797;
        this.assemblyExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyAssignment;
    return this;
}

AssemblyAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyAssignmentContext.prototype.constructor = AssemblyAssignmentContext;

AssemblyAssignmentContext.prototype.assemblyIdentifierOrList = function() {
    return this.getTypedRuleContext(AssemblyIdentifierOrListContext,0);
};

AssemblyAssignmentContext.prototype.assemblyExpression = function() {
    return this.getTypedRuleContext(AssemblyExpressionContext,0);
};

AssemblyAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyAssignment(this);
	}
};

AssemblyAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyAssignment(this);
	}
};




SolidityParser.AssemblyAssignmentContext = AssemblyAssignmentContext;

SolidityParser.prototype.assemblyAssignment = function() {

    var localctx = new AssemblyAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, SolidityParser.RULE_assemblyAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 799;
        this.assemblyIdentifierOrList();
        this.state = 800;
        this.match(SolidityParser.T__85);
        this.state = 801;
        this.assemblyExpression();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyIdentifierOrListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyIdentifierOrList;
    return this;
}

AssemblyIdentifierOrListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyIdentifierOrListContext.prototype.constructor = AssemblyIdentifierOrListContext;

AssemblyIdentifierOrListContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

AssemblyIdentifierOrListContext.prototype.assemblyIdentifierList = function() {
    return this.getTypedRuleContext(AssemblyIdentifierListContext,0);
};

AssemblyIdentifierOrListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyIdentifierOrList(this);
	}
};

AssemblyIdentifierOrListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyIdentifierOrList(this);
	}
};




SolidityParser.AssemblyIdentifierOrListContext = AssemblyIdentifierOrListContext;

SolidityParser.prototype.assemblyIdentifierOrList = function() {

    var localctx = new AssemblyIdentifierOrListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, SolidityParser.RULE_assemblyIdentifierOrList);
    try {
        this.state = 808;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__10:
        case SolidityParser.Identifier:
            this.enterOuterAlt(localctx, 1);
            this.state = 803;
            this.identifier();
            break;
        case SolidityParser.T__18:
            this.enterOuterAlt(localctx, 2);
            this.state = 804;
            this.match(SolidityParser.T__18);
            this.state = 805;
            this.assemblyIdentifierList();
            this.state = 806;
            this.match(SolidityParser.T__19);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyIdentifierListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyIdentifierList;
    return this;
}

AssemblyIdentifierListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyIdentifierListContext.prototype.constructor = AssemblyIdentifierListContext;

AssemblyIdentifierListContext.prototype.Identifier = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(SolidityParser.Identifier);
    } else {
        return this.getToken(SolidityParser.Identifier, i);
    }
};


AssemblyIdentifierListContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyIdentifierList(this);
	}
};

AssemblyIdentifierListContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyIdentifierList(this);
	}
};




SolidityParser.AssemblyIdentifierListContext = AssemblyIdentifierListContext;

SolidityParser.prototype.assemblyIdentifierList = function() {

    var localctx = new AssemblyIdentifierListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, SolidityParser.RULE_assemblyIdentifierList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 810;
        this.match(SolidityParser.Identifier);
        this.state = 815;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__12) {
            this.state = 811;
            this.match(SolidityParser.T__12);
            this.state = 812;
            this.match(SolidityParser.Identifier);
            this.state = 817;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyRightAssignmentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyRightAssignment;
    return this;
}

AssemblyRightAssignmentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyRightAssignmentContext.prototype.constructor = AssemblyRightAssignmentContext;

AssemblyRightAssignmentContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

AssemblyRightAssignmentContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyRightAssignment(this);
	}
};

AssemblyRightAssignmentContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyRightAssignment(this);
	}
};




SolidityParser.AssemblyRightAssignmentContext = AssemblyRightAssignmentContext;

SolidityParser.prototype.assemblyRightAssignment = function() {

    var localctx = new AssemblyRightAssignmentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, SolidityParser.RULE_assemblyRightAssignment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 818;
        this.match(SolidityParser.T__86);
        this.state = 819;
        this.match(SolidityParser.Identifier);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LabelDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_labelDefinition;
    return this;
}

LabelDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LabelDefinitionContext.prototype.constructor = LabelDefinitionContext;

LabelDefinitionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

LabelDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterLabelDefinition(this);
	}
};

LabelDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitLabelDefinition(this);
	}
};




SolidityParser.LabelDefinitionContext = LabelDefinitionContext;

SolidityParser.prototype.labelDefinition = function() {

    var localctx = new LabelDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, SolidityParser.RULE_labelDefinition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 821;
        this.match(SolidityParser.Identifier);
        this.state = 822;
        this.match(SolidityParser.T__70);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblySwitchContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblySwitch;
    return this;
}

AssemblySwitchContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblySwitchContext.prototype.constructor = AssemblySwitchContext;

AssemblySwitchContext.prototype.assemblyExpression = function() {
    return this.getTypedRuleContext(AssemblyExpressionContext,0);
};

AssemblySwitchContext.prototype.assemblyCase = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyCaseContext);
    } else {
        return this.getTypedRuleContext(AssemblyCaseContext,i);
    }
};

AssemblySwitchContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

AssemblySwitchContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblySwitch(this);
	}
};

AssemblySwitchContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblySwitch(this);
	}
};




SolidityParser.AssemblySwitchContext = AssemblySwitchContext;

SolidityParser.prototype.assemblySwitch = function() {

    var localctx = new AssemblySwitchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, SolidityParser.RULE_assemblySwitch);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        this.match(SolidityParser.T__87);
        this.state = 825;
        this.assemblyExpression();
        this.state = 829;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===SolidityParser.T__89) {
            this.state = 826;
            this.assemblyCase();
            this.state = 831;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 835;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__88) {
            this.state = 832;
            this.match(SolidityParser.T__88);
            this.state = 833;
            this.match(SolidityParser.T__70);
            this.state = 834;
            this.assemblyBlock();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyCaseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyCase;
    return this;
}

AssemblyCaseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyCaseContext.prototype.constructor = AssemblyCaseContext;

AssemblyCaseContext.prototype.assemblyLiteral = function() {
    return this.getTypedRuleContext(AssemblyLiteralContext,0);
};

AssemblyCaseContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

AssemblyCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyCase(this);
	}
};

AssemblyCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyCase(this);
	}
};




SolidityParser.AssemblyCaseContext = AssemblyCaseContext;

SolidityParser.prototype.assemblyCase = function() {

    var localctx = new AssemblyCaseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, SolidityParser.RULE_assemblyCase);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 837;
        this.match(SolidityParser.T__89);
        this.state = 838;
        this.assemblyLiteral();
        this.state = 839;
        this.match(SolidityParser.T__70);
        this.state = 840;
        this.assemblyBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyFunctionDefinitionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyFunctionDefinition;
    return this;
}

AssemblyFunctionDefinitionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyFunctionDefinitionContext.prototype.constructor = AssemblyFunctionDefinitionContext;

AssemblyFunctionDefinitionContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

AssemblyFunctionDefinitionContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

AssemblyFunctionDefinitionContext.prototype.assemblyIdentifierList = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyIdentifierListContext);
    } else {
        return this.getTypedRuleContext(AssemblyIdentifierListContext,i);
    }
};

AssemblyFunctionDefinitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyFunctionDefinition(this);
	}
};

AssemblyFunctionDefinitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyFunctionDefinition(this);
	}
};




SolidityParser.AssemblyFunctionDefinitionContext = AssemblyFunctionDefinitionContext;

SolidityParser.prototype.assemblyFunctionDefinition = function() {

    var localctx = new AssemblyFunctionDefinitionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, SolidityParser.RULE_assemblyFunctionDefinition);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 842;
        this.match(SolidityParser.T__25);
        this.state = 843;
        this.match(SolidityParser.Identifier);
        this.state = 844;
        this.match(SolidityParser.T__18);
        this.state = 846;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.Identifier) {
            this.state = 845;
            this.assemblyIdentifierList();
        }

        this.state = 848;
        this.match(SolidityParser.T__19);
        this.state = 851;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===SolidityParser.T__90) {
            this.state = 849;
            this.match(SolidityParser.T__90);
            this.state = 850;
            this.assemblyIdentifierList();
        }

        this.state = 853;
        this.assemblyBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyForContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyFor;
    return this;
}

AssemblyForContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyForContext.prototype.constructor = AssemblyForContext;

AssemblyForContext.prototype.assemblyExpression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyExpressionContext);
    } else {
        return this.getTypedRuleContext(AssemblyExpressionContext,i);
    }
};

AssemblyForContext.prototype.assemblyBlock = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssemblyBlockContext);
    } else {
        return this.getTypedRuleContext(AssemblyBlockContext,i);
    }
};

AssemblyForContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyFor(this);
	}
};

AssemblyForContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyFor(this);
	}
};




SolidityParser.AssemblyForContext = AssemblyForContext;

SolidityParser.prototype.assemblyFor = function() {

    var localctx = new AssemblyForContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, SolidityParser.RULE_assemblyFor);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 855;
        this.match(SolidityParser.T__22);
        this.state = 858;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__11:
            this.state = 856;
            this.assemblyBlock();
            break;
        case SolidityParser.T__43:
        case SolidityParser.T__46:
        case SolidityParser.T__83:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.Identifier:
        case SolidityParser.StringLiteral:
            this.state = 857;
            this.assemblyExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 860;
        this.assemblyExpression();
        this.state = 863;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__11:
            this.state = 861;
            this.assemblyBlock();
            break;
        case SolidityParser.T__43:
        case SolidityParser.T__46:
        case SolidityParser.T__83:
        case SolidityParser.DecimalNumber:
        case SolidityParser.HexNumber:
        case SolidityParser.HexLiteral:
        case SolidityParser.Identifier:
        case SolidityParser.StringLiteral:
            this.state = 862;
            this.assemblyExpression();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 865;
        this.assemblyBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssemblyLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_assemblyLiteral;
    return this;
}

AssemblyLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssemblyLiteralContext.prototype.constructor = AssemblyLiteralContext;

AssemblyLiteralContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

AssemblyLiteralContext.prototype.DecimalNumber = function() {
    return this.getToken(SolidityParser.DecimalNumber, 0);
};

AssemblyLiteralContext.prototype.HexNumber = function() {
    return this.getToken(SolidityParser.HexNumber, 0);
};

AssemblyLiteralContext.prototype.HexLiteral = function() {
    return this.getToken(SolidityParser.HexLiteral, 0);
};

AssemblyLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterAssemblyLiteral(this);
	}
};

AssemblyLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitAssemblyLiteral(this);
	}
};




SolidityParser.AssemblyLiteralContext = AssemblyLiteralContext;

SolidityParser.prototype.assemblyLiteral = function() {

    var localctx = new AssemblyLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, SolidityParser.RULE_assemblyLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 867;
        _la = this._input.LA(1);
        if(!(((((_la - 101)) & ~0x1f) == 0 && ((1 << (_la - 101)) & ((1 << (SolidityParser.DecimalNumber - 101)) | (1 << (SolidityParser.HexNumber - 101)) | (1 << (SolidityParser.HexLiteral - 101)) | (1 << (SolidityParser.StringLiteral - 101)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubAssemblyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_subAssembly;
    return this;
}

SubAssemblyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubAssemblyContext.prototype.constructor = SubAssemblyContext;

SubAssemblyContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

SubAssemblyContext.prototype.assemblyBlock = function() {
    return this.getTypedRuleContext(AssemblyBlockContext,0);
};

SubAssemblyContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterSubAssembly(this);
	}
};

SubAssemblyContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitSubAssembly(this);
	}
};




SolidityParser.SubAssemblyContext = SubAssemblyContext;

SolidityParser.prototype.subAssembly = function() {

    var localctx = new SubAssemblyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, SolidityParser.RULE_subAssembly);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 869;
        this.match(SolidityParser.T__39);
        this.state = 870;
        this.match(SolidityParser.Identifier);
        this.state = 871;
        this.assemblyBlock();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DataSizeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_dataSize;
    return this;
}

DataSizeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataSizeContext.prototype.constructor = DataSizeContext;

DataSizeContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

DataSizeContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterDataSize(this);
	}
};

DataSizeContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitDataSize(this);
	}
};




SolidityParser.DataSizeContext = DataSizeContext;

SolidityParser.prototype.dataSize = function() {

    var localctx = new DataSizeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, SolidityParser.RULE_dataSize);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 873;
        this.match(SolidityParser.T__91);
        this.state = 874;
        this.match(SolidityParser.T__18);
        this.state = 875;
        this.match(SolidityParser.StringLiteral);
        this.state = 876;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LinkerSymbolContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_linkerSymbol;
    return this;
}

LinkerSymbolContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LinkerSymbolContext.prototype.constructor = LinkerSymbolContext;

LinkerSymbolContext.prototype.StringLiteral = function() {
    return this.getToken(SolidityParser.StringLiteral, 0);
};

LinkerSymbolContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterLinkerSymbol(this);
	}
};

LinkerSymbolContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitLinkerSymbol(this);
	}
};




SolidityParser.LinkerSymbolContext = LinkerSymbolContext;

SolidityParser.prototype.linkerSymbol = function() {

    var localctx = new LinkerSymbolContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, SolidityParser.RULE_linkerSymbol);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 878;
        this.match(SolidityParser.T__92);
        this.state = 879;
        this.match(SolidityParser.T__18);
        this.state = 880;
        this.match(SolidityParser.StringLiteral);
        this.state = 881;
        this.match(SolidityParser.T__19);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TupleExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_tupleExpression;
    return this;
}

TupleExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TupleExpressionContext.prototype.constructor = TupleExpressionContext;

TupleExpressionContext.prototype.expression = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExpressionContext);
    } else {
        return this.getTypedRuleContext(ExpressionContext,i);
    }
};

TupleExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterTupleExpression(this);
	}
};

TupleExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitTupleExpression(this);
	}
};




SolidityParser.TupleExpressionContext = TupleExpressionContext;

SolidityParser.prototype.tupleExpression = function() {

    var localctx = new TupleExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, SolidityParser.RULE_tupleExpression);
    var _la = 0; // Token type
    try {
        this.state = 909;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case SolidityParser.T__18:
            this.enterOuterAlt(localctx, 1);
            this.state = 883;
            this.match(SolidityParser.T__18);

            this.state = 885;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__29))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (SolidityParser.T__45 - 46)) | (1 << (SolidityParser.T__46 - 46)) | (1 << (SolidityParser.T__47 - 46)) | (1 << (SolidityParser.T__48 - 46)) | (1 << (SolidityParser.T__49 - 46)) | (1 << (SolidityParser.T__50 - 46)) | (1 << (SolidityParser.T__51 - 46)) | (1 << (SolidityParser.T__52 - 46)) | (1 << (SolidityParser.T__53 - 46)) | (1 << (SolidityParser.T__54 - 46)) | (1 << (SolidityParser.T__55 - 46)) | (1 << (SolidityParser.T__56 - 46)) | (1 << (SolidityParser.T__57 - 46)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.BooleanLiteral - 94)) | (1 << (SolidityParser.DecimalNumber - 94)) | (1 << (SolidityParser.HexNumber - 94)) | (1 << (SolidityParser.HexLiteral - 94)) | (1 << (SolidityParser.Identifier - 94)) | (1 << (SolidityParser.StringLiteral - 94)))) !== 0)) {
                this.state = 884;
                this.expression(0);
            }

            this.state = 893;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===SolidityParser.T__12) {
                this.state = 887;
                this.match(SolidityParser.T__12);
                this.state = 889;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__29))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (SolidityParser.T__45 - 46)) | (1 << (SolidityParser.T__46 - 46)) | (1 << (SolidityParser.T__47 - 46)) | (1 << (SolidityParser.T__48 - 46)) | (1 << (SolidityParser.T__49 - 46)) | (1 << (SolidityParser.T__50 - 46)) | (1 << (SolidityParser.T__51 - 46)) | (1 << (SolidityParser.T__52 - 46)) | (1 << (SolidityParser.T__53 - 46)) | (1 << (SolidityParser.T__54 - 46)) | (1 << (SolidityParser.T__55 - 46)) | (1 << (SolidityParser.T__56 - 46)) | (1 << (SolidityParser.T__57 - 46)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.BooleanLiteral - 94)) | (1 << (SolidityParser.DecimalNumber - 94)) | (1 << (SolidityParser.HexNumber - 94)) | (1 << (SolidityParser.HexLiteral - 94)) | (1 << (SolidityParser.Identifier - 94)) | (1 << (SolidityParser.StringLiteral - 94)))) !== 0)) {
                    this.state = 888;
                    this.expression(0);
                }

                this.state = 895;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 896;
            this.match(SolidityParser.T__19);
            break;
        case SolidityParser.T__29:
            this.enterOuterAlt(localctx, 2);
            this.state = 897;
            this.match(SolidityParser.T__29);
            this.state = 906;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << SolidityParser.T__10) | (1 << SolidityParser.T__18) | (1 << SolidityParser.T__29))) !== 0) || ((((_la - 46)) & ~0x1f) == 0 && ((1 << (_la - 46)) & ((1 << (SolidityParser.T__45 - 46)) | (1 << (SolidityParser.T__46 - 46)) | (1 << (SolidityParser.T__47 - 46)) | (1 << (SolidityParser.T__48 - 46)) | (1 << (SolidityParser.T__49 - 46)) | (1 << (SolidityParser.T__50 - 46)) | (1 << (SolidityParser.T__51 - 46)) | (1 << (SolidityParser.T__52 - 46)) | (1 << (SolidityParser.T__53 - 46)) | (1 << (SolidityParser.T__54 - 46)) | (1 << (SolidityParser.T__55 - 46)) | (1 << (SolidityParser.T__56 - 46)) | (1 << (SolidityParser.T__57 - 46)))) !== 0) || ((((_la - 94)) & ~0x1f) == 0 && ((1 << (_la - 94)) & ((1 << (SolidityParser.Int - 94)) | (1 << (SolidityParser.Uint - 94)) | (1 << (SolidityParser.Byte - 94)) | (1 << (SolidityParser.Fixed - 94)) | (1 << (SolidityParser.Ufixed - 94)) | (1 << (SolidityParser.BooleanLiteral - 94)) | (1 << (SolidityParser.DecimalNumber - 94)) | (1 << (SolidityParser.HexNumber - 94)) | (1 << (SolidityParser.HexLiteral - 94)) | (1 << (SolidityParser.Identifier - 94)) | (1 << (SolidityParser.StringLiteral - 94)))) !== 0)) {
                this.state = 898;
                this.expression(0);
                this.state = 903;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                while(_la===SolidityParser.T__12) {
                    this.state = 899;
                    this.match(SolidityParser.T__12);
                    this.state = 900;
                    this.expression(0);
                    this.state = 905;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                }
            }

            this.state = 908;
            this.match(SolidityParser.T__30);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementaryTypeNameExpressionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_elementaryTypeNameExpression;
    return this;
}

ElementaryTypeNameExpressionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementaryTypeNameExpressionContext.prototype.constructor = ElementaryTypeNameExpressionContext;

ElementaryTypeNameExpressionContext.prototype.elementaryTypeName = function() {
    return this.getTypedRuleContext(ElementaryTypeNameContext,0);
};

ElementaryTypeNameExpressionContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterElementaryTypeNameExpression(this);
	}
};

ElementaryTypeNameExpressionContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitElementaryTypeNameExpression(this);
	}
};




SolidityParser.ElementaryTypeNameExpressionContext = ElementaryTypeNameExpressionContext;

SolidityParser.prototype.elementaryTypeNameExpression = function() {

    var localctx = new ElementaryTypeNameExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, SolidityParser.RULE_elementaryTypeNameExpression);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 911;
        this.elementaryTypeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_numberLiteral;
    return this;
}

NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberLiteralContext.prototype.constructor = NumberLiteralContext;

NumberLiteralContext.prototype.DecimalNumber = function() {
    return this.getToken(SolidityParser.DecimalNumber, 0);
};

NumberLiteralContext.prototype.HexNumber = function() {
    return this.getToken(SolidityParser.HexNumber, 0);
};

NumberLiteralContext.prototype.NumberUnit = function() {
    return this.getToken(SolidityParser.NumberUnit, 0);
};

NumberLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitNumberLiteral(this);
	}
};




SolidityParser.NumberLiteralContext = NumberLiteralContext;

SolidityParser.prototype.numberLiteral = function() {

    var localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, SolidityParser.RULE_numberLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 913;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.DecimalNumber || _la===SolidityParser.HexNumber)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 915;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
        if(la_===1) {
            this.state = 914;
            this.match(SolidityParser.NumberUnit);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = SolidityParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.Identifier = function() {
    return this.getToken(SolidityParser.Identifier, 0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof SolidityListener ) {
        listener.exitIdentifier(this);
	}
};




SolidityParser.IdentifierContext = IdentifierContext;

SolidityParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, SolidityParser.RULE_identifier);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 917;
        _la = this._input.LA(1);
        if(!(_la===SolidityParser.T__10 || _la===SolidityParser.Identifier)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


SolidityParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 30:
			return this.typeName_sempred(localctx, predIndex);
	case 52:
			return this.expression_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

SolidityParser.prototype.typeName_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return this.precpred(this._ctx, 2);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

SolidityParser.prototype.expression_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 1:
			return this.precpred(this._ctx, 14);
		case 2:
			return this.precpred(this._ctx, 13);
		case 3:
			return this.precpred(this._ctx, 12);
		case 4:
			return this.precpred(this._ctx, 11);
		case 5:
			return this.precpred(this._ctx, 10);
		case 6:
			return this.precpred(this._ctx, 9);
		case 7:
			return this.precpred(this._ctx, 8);
		case 8:
			return this.precpred(this._ctx, 7);
		case 9:
			return this.precpred(this._ctx, 6);
		case 10:
			return this.precpred(this._ctx, 5);
		case 11:
			return this.precpred(this._ctx, 4);
		case 12:
			return this.precpred(this._ctx, 3);
		case 13:
			return this.precpred(this._ctx, 2);
		case 14:
			return this.precpred(this._ctx, 25);
		case 15:
			return this.precpred(this._ctx, 23);
		case 16:
			return this.precpred(this._ctx, 22);
		case 17:
			return this.precpred(this._ctx, 21);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.SolidityParser = SolidityParser;
